
project3SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000160  00800060  00002e0e  00002ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001c0  008001c0  00003002  2**0
                  ALLOC
  3 .debug_aranges 00000498  00000000  00000000  00003002  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000793  00000000  00000000  0000349a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000044b1  00000000  00000000  00003c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000209d  00000000  00000000  000080de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004285  00000000  00000000  0000a17b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005d0  00000000  00000000  0000e400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e76  00000000  00000000  0000e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  0000f846  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00036ff4  00000000  00000000  000101b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  000471a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <main>
      8a:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 ea       	ldi	r22, 0xA5	; 165
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 55       	subi	r30, 0x53	; 83
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_init>:
 * TIMER0_t structure and enables the appropriate modes and interrupts.
 *
 * @param timer0 Pointer to the TIMER0_t structure containing the
 *               configuration settings for Timer0.
 */
void TIMER0_init(TIMER0_t *timer0) {
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <TIMER0_init+0xa>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <TIMER0_init+0xc>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
  TCCR0bits.cs0 = TIMER0_CLOCK_0; /* Set clock source to stop the timer */
     e42:	e3 e5       	ldi	r30, 0x53	; 83
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	80 83       	st	Z, r24

  TCCR0bits.wgm00 = timer0->mode & 0x01; /* Set WGM00 based on mode */
     e4c:	a3 e5       	ldi	r26, 0x53	; 83
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	80 81       	ld	r24, Z
     e56:	83 70       	andi	r24, 0x03	; 3
     e58:	81 70       	andi	r24, 0x01	; 1
     e5a:	81 70       	andi	r24, 0x01	; 1
     e5c:	81 70       	andi	r24, 0x01	; 1
     e5e:	81 70       	andi	r24, 0x01	; 1
     e60:	98 2f       	mov	r25, r24
     e62:	92 95       	swap	r25
     e64:	99 0f       	add	r25, r25
     e66:	99 0f       	add	r25, r25
     e68:	90 7c       	andi	r25, 0xC0	; 192
     e6a:	8c 91       	ld	r24, X
     e6c:	8f 7b       	andi	r24, 0xBF	; 191
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
  TCCR0bits.wgm01 = timer0->mode >> 1; /* Set WGM01 based on mode */
     e72:	a3 e5       	ldi	r26, 0x53	; 83
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e9 81       	ldd	r30, Y+1	; 0x01
     e78:	fa 81       	ldd	r31, Y+2	; 0x02
     e7a:	80 81       	ld	r24, Z
     e7c:	83 70       	andi	r24, 0x03	; 3
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	95 95       	asr	r25
     e84:	87 95       	ror	r24
     e86:	81 70       	andi	r24, 0x01	; 1
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	98 2f       	mov	r25, r24
     e8c:	99 0f       	add	r25, r25
     e8e:	99 0f       	add	r25, r25
     e90:	99 0f       	add	r25, r25
     e92:	8c 91       	ld	r24, X
     e94:	87 7f       	andi	r24, 0xF7	; 247
     e96:	89 2b       	or	r24, r25
     e98:	8c 93       	st	X, r24
  TCCR0bits.com0 = timer0->compareOutputMode; /* Set compare output mode */
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	80 81       	ld	r24, Z
     ea4:	86 95       	lsr	r24
     ea6:	86 95       	lsr	r24
     ea8:	83 70       	andi	r24, 0x03	; 3
     eaa:	83 70       	andi	r24, 0x03	; 3
     eac:	98 2f       	mov	r25, r24
     eae:	92 95       	swap	r25
     eb0:	90 7f       	andi	r25, 0xF0	; 240
     eb2:	8c 91       	ld	r24, X
     eb4:	8f 7c       	andi	r24, 0xCF	; 207
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24
  SET_BIT(TIMSK, OCIE0);  /* Enable Timer0 CTC interrupt */
  TIMER0_compareInterruptHandler = timer0->compareInterruptHandler; /* Set compare handler */
#endif

  /* Configure the output pin for PWM if not in normal mode */
  if (timer0->compareOutputMode != TIMER0_COMPARE_NORMAL) {
     eba:	e9 81       	ldd	r30, Y+1	; 0x01
     ebc:	fa 81       	ldd	r31, Y+2	; 0x02
     ebe:	80 81       	ld	r24, Z
     ec0:	8c 70       	andi	r24, 0x0C	; 12
     ec2:	88 23       	and	r24, r24
     ec4:	29 f0       	breq	.+10     	; 0xed0 <TIMER0_init+0xa2>
    GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	63 e0       	ldi	r22, 0x03	; 3
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
  }

  /* Set timer operation mode and initialize values */
  switch (timer0->mode)
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	80 81       	ld	r24, Z
     ed6:	83 70       	andi	r24, 0x03	; 3
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3c 83       	std	Y+4, r19	; 0x04
     ede:	2b 83       	std	Y+3, r18	; 0x03
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	11 f1       	breq	.+68     	; 0xf2e <TIMER0_init+0x100>
     eea:	eb 81       	ldd	r30, Y+3	; 0x03
     eec:	fc 81       	ldd	r31, Y+4	; 0x04
     eee:	e2 30       	cpi	r30, 0x02	; 2
     ef0:	f1 05       	cpc	r31, r1
     ef2:	34 f4       	brge	.+12     	; 0xf00 <TIMER0_init+0xd2>
     ef4:	2b 81       	ldd	r18, Y+3	; 0x03
     ef6:	3c 81       	ldd	r19, Y+4	; 0x04
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	61 f0       	breq	.+24     	; 0xf16 <TIMER0_init+0xe8>
     efe:	4b c0       	rjmp	.+150    	; 0xf96 <TIMER0_init+0x168>
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	91 05       	cpc	r25, r1
     f08:	c1 f0       	breq	.+48     	; 0xf3a <TIMER0_init+0x10c>
     f0a:	eb 81       	ldd	r30, Y+3	; 0x03
     f0c:	fc 81       	ldd	r31, Y+4	; 0x04
     f0e:	e3 30       	cpi	r30, 0x03	; 3
     f10:	f1 05       	cpc	r31, r1
     f12:	f9 f0       	breq	.+62     	; 0xf52 <TIMER0_init+0x124>
     f14:	40 c0       	rjmp	.+128    	; 0xf96 <TIMER0_init+0x168>
    {
    case TIMER0_MODE_NORMAL:
      TCCR0bits.foc0 = 1; /* Set FOC0 for normal mode */
     f16:	e3 e5       	ldi	r30, 0x53	; 83
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 68       	ori	r24, 0x80	; 128
     f1e:	80 83       	st	Z, r24
      TIMER0_setTimerValue(timer0->uni.timerValue); /* Set initial timer value */
     f20:	a2 e5       	ldi	r26, 0x52	; 82
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e9 81       	ldd	r30, Y+1	; 0x01
     f26:	fa 81       	ldd	r31, Y+2	; 0x02
     f28:	81 81       	ldd	r24, Z+1	; 0x01
     f2a:	8c 93       	st	X, r24
     f2c:	34 c0       	rjmp	.+104    	; 0xf96 <TIMER0_init+0x168>
      break;
    case TIMER0_MODE_PWM_PC:
      TCCR0bits.foc0 = 0; /* Clear FOC0 for PWM mode */
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 77       	andi	r24, 0x7F	; 127
     f36:	80 83       	st	Z, r24
     f38:	2e c0       	rjmp	.+92     	; 0xf96 <TIMER0_init+0x168>
      break;
    case TIMER0_MODE_CTC:
      TCCR0bits.foc0 = 1; /* Set FOC0 for CTC mode */
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	80 83       	st	Z, r24
      TIMER0_setCompareValue(timer0->uni.compareValue); /* Set compare value */
     f44:	ac e5       	ldi	r26, 0x5C	; 92
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	8c 93       	st	X, r24
     f50:	22 c0       	rjmp	.+68     	; 0xf96 <TIMER0_init+0x168>
      break;
    case TIMER0_MODE_FAST_PWM:
      TCCR0bits.foc0 = 0; /* Clear FOC0 for fast PWM mode */
     f52:	e3 e5       	ldi	r30, 0x53	; 83
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	80 83       	st	Z, r24
      TIMER0_setDutyCycle(timer0->uni.dutyCycle); /* Set duty cycle */
     f5c:	0c e5       	ldi	r16, 0x5C	; 92
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	e9 81       	ldd	r30, Y+1	; 0x01
     f62:	fa 81       	ldd	r31, Y+2	; 0x02
     f64:	81 81       	ldd	r24, Z+1	; 0x01
     f66:	48 2f       	mov	r20, r24
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	ca 01       	movw	r24, r20
     f6c:	9c 01       	movw	r18, r24
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	c9 01       	movw	r24, r18
     f74:	96 95       	lsr	r25
     f76:	98 2f       	mov	r25, r24
     f78:	88 27       	eor	r24, r24
     f7a:	97 95       	ror	r25
     f7c:	87 95       	ror	r24
     f7e:	82 1b       	sub	r24, r18
     f80:	93 0b       	sbc	r25, r19
     f82:	84 0f       	add	r24, r20
     f84:	95 1f       	adc	r25, r21
     f86:	24 e6       	ldi	r18, 0x64	; 100
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	b9 01       	movw	r22, r18
     f8c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__udivmodhi4>
     f90:	cb 01       	movw	r24, r22
     f92:	f8 01       	movw	r30, r16
     f94:	80 83       	st	Z, r24
      break;
    }

  TCCR0bits.cs0 = timer0->clockPre; /* Set clock prescaler */
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	80 81       	ld	r24, Z
     fa0:	82 95       	swap	r24
     fa2:	8f 70       	andi	r24, 0x0F	; 15
     fa4:	87 70       	andi	r24, 0x07	; 7
     fa6:	98 2f       	mov	r25, r24
     fa8:	97 70       	andi	r25, 0x07	; 7
     faa:	8c 91       	ld	r24, X
     fac:	88 7f       	andi	r24, 0xF8	; 248
     fae:	89 2b       	or	r24, r25
     fb0:	8c 93       	st	X, r24
}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <TIMER0_deInit>:
 * @brief Deinitializes Timer0 and stops its operation.
 *
 * This function resets Timer0 and disables its operation, clearing
 * all associated interrupts.
 */
void TIMER0_deInit(void) {
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
  TCCR0 = 0; /* Reset Timer0 registers */
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	10 82       	st	Z, r1
  CLEAR_BIT(TIMSK, TOIE0); /* Disable Timer0 overflow interrupt */
     fd2:	a9 e5       	ldi	r26, 0x59	; 89
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e9 e5       	ldi	r30, 0x59	; 89
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	8c 93       	st	X, r24
  CLEAR_BIT(TIMSK, OCIE0); /* Disable Timer0 CTC interrupt */
     fe0:	a9 e5       	ldi	r26, 0x59	; 89
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e9 e5       	ldi	r30, 0x59	; 89
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8d 7f       	andi	r24, 0xFD	; 253
     fec:	8c 93       	st	X, r24
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPIO_setupPinDirection>:
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1)
 * @param direction Direction of the pin (PIN_INPUT or PIN_OUTPUT)
 */
void GPIO_setupPinDirection (uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPIO_setupPinDirection+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPinDirection+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	88 30       	cpi	r24, 0x08	; 8
    100c:	08 f0       	brcs	.+2      	; 0x1010 <GPIO_setupPinDirection+0x1c>
    100e:	d5 c0       	rjmp	.+426    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	08 f0       	brcs	.+2      	; 0x1018 <GPIO_setupPinDirection+0x24>
    1016:	d1 c0       	rjmp	.+418    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
      /* Do Nothing */
    }
  else
    {
      /* Setup the pin direction as required */
      switch (port_num)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <GPIO_setupPinDirection+0x3a>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <GPIO_setupPinDirection+0xc0>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <GPIO_setupPinDirection+0x4e>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	71 f0       	breq	.+28     	; 0x105c <GPIO_setupPinDirection+0x68>
    1040:	bc c0       	rjmp	.+376    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <GPIO_setupPinDirection+0x5a>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <GPIO_setupPinDirection+0x118>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x66>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <GPIO_setupPinDirection+0x170>
    105a:	af c0       	rjmp	.+350    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	{
	case PORTA_ID:
	  if (direction == PIN_OUTPUT)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <GPIO_setupPinDirection+0x96>
	    {
	      SET_BIT(DDRA, pin_num);
    1062:	aa e3       	ldi	r26, 0x3A	; 58
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ea e3       	ldi	r30, 0x3A	; 58
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x8c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x88>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	98 c0       	rjmp	.+304    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRA, pin_num);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0xb4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0xb0>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	83 c0       	rjmp	.+262    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  break;
	case PORTB_ID:
	  if (direction == PIN_OUTPUT)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <GPIO_setupPinDirection+0xee>
	    {
	      SET_BIT(DDRB, pin_num);
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0xe4>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0xe0>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	6c c0       	rjmp	.+216    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRB, pin_num);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x10c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x108>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  break;
	case PORTC_ID:
	  if (direction == PIN_OUTPUT)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <GPIO_setupPinDirection+0x146>
	    {
	      SET_BIT(DDRC, pin_num);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x13c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x138>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRC, pin_num);
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x164>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x160>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  break;
	case PORTD_ID:
	  if (direction == PIN_OUTPUT)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a1 f4       	brne	.+40     	; 0x1192 <GPIO_setupPinDirection+0x19e>
	    {
	      SET_BIT(DDRD, pin_num);
    116a:	a1 e3       	ldi	r26, 0x31	; 49
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0x194>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0x190>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(DDRD, pin_num);
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x1bc>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x1b8>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
	    }
	  break;
	}
    }
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <GPIO_writePin>:
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1)
 * @param value Value to write (LOGIC_HIGH or LOGIC_LOW)
 */
void GPIO_writePin (uint8 port_num, uint8 pin_num, uint8 value)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_writePin+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_writePin+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6a 83       	std	Y+2, r22	; 0x02
    11dc:	4b 83       	std	Y+3, r20	; 0x03
  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <GPIO_writePin+0x1c>
    11e4:	d5 c0       	rjmp	.+426    	; 0x1390 <GPIO_writePin+0x1c6>
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <GPIO_writePin+0x24>
    11ec:	d1 c0       	rjmp	.+418    	; 0x1390 <GPIO_writePin+0x1c6>
      /* Do Nothing */
    }
  else
    {
      /* Write the pin value as required */
      switch (port_num)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <GPIO_writePin+0x3a>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <GPIO_writePin+0xc0>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <GPIO_writePin+0x4e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	71 f0       	breq	.+28     	; 0x1232 <GPIO_writePin+0x68>
    1216:	bc c0       	rjmp	.+376    	; 0x1390 <GPIO_writePin+0x1c6>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_writePin+0x5a>
    1222:	5f c0       	rjmp	.+190    	; 0x12e2 <GPIO_writePin+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x66>
    122e:	85 c0       	rjmp	.+266    	; 0x133a <GPIO_writePin+0x170>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <GPIO_writePin+0x1c6>
	{
	case PORTA_ID:
	  if (value == LOGIC_HIGH)
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <GPIO_writePin+0x96>
	    {
	      SET_BIT(PORTA, pin_num);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x8c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x88>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	98 c0       	rjmp	.+304    	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTA, pin_num);
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0xb4>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0xb0>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	83 c0       	rjmp	.+262    	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  break;
	case PORTB_ID:
	  if (value == LOGIC_HIGH)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <GPIO_writePin+0xee>
	    {
	      SET_BIT(PORTB, pin_num);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0xe4>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0xe0>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	6c c0       	rjmp	.+216    	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTB, pin_num);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x10c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x108>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  break;
	case PORTC_ID:
	  if (value == LOGIC_HIGH)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <GPIO_writePin+0x146>
	    {
	      SET_BIT(PORTC, pin_num);
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0x13c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0x138>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTC, pin_num);
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x164>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x160>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  break;
	case PORTD_ID:
	  if (value == LOGIC_HIGH)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <GPIO_writePin+0x19e>
	    {
	      SET_BIT(PORTD, pin_num);
    1340:	a2 e3       	ldi	r26, 0x32	; 50
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0x194>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0x190>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <GPIO_writePin+0x1c6>
	    }
	  else
	    {
	      CLEAR_BIT(PORTD, pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x1bc>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x1b8>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
	    }
	  break;
	}
    }
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <GPIO_togglePin>:
 *
 * @param port_num Port number (0 to NUM_OF_PORTS-1).
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1).
 */
void GPIO_togglePin (uint8 port_num, uint8 pin_num)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_togglePin+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <GPIO_togglePin+0x8>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	88 30       	cpi	r24, 0x08	; 8
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <GPIO_togglePin+0x18>
    13b6:	72 c0       	rjmp	.+228    	; 0x149c <GPIO_togglePin+0xfc>
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <GPIO_togglePin+0x20>
    13be:	6e c0       	rjmp	.+220    	; 0x149c <GPIO_togglePin+0xfc>
      /* Do Nothing */
    }
  else
    {
      /* Write the pin value as required */
      switch (port_num)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3c 83       	std	Y+4, r19	; 0x04
    13c8:	2b 83       	std	Y+3, r18	; 0x03
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	49 f1       	breq	.+82     	; 0x1426 <GPIO_togglePin+0x86>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <GPIO_togglePin+0x48>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	61 f0       	breq	.+24     	; 0x13fe <GPIO_togglePin+0x5e>
    13e6:	5a c0       	rjmp	.+180    	; 0x149c <GPIO_togglePin+0xfc>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	71 f1       	breq	.+92     	; 0x144e <GPIO_togglePin+0xae>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	e9 f1       	breq	.+122    	; 0x1476 <GPIO_togglePin+0xd6>
    13fc:	4f c0       	rjmp	.+158    	; 0x149c <GPIO_togglePin+0xfc>
	{
	case PORTA_ID:
	  TOGGLE_BIT(PORTA, pin_num);
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_togglePin+0x7c>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_togglePin+0x78>
    1420:	84 27       	eor	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	3b c0       	rjmp	.+118    	; 0x149c <GPIO_togglePin+0xfc>
	  break;
	case PORTB_ID:
	  TOGGLE_BIT(PORTB, pin_num);
    1426:	a8 e3       	ldi	r26, 0x38	; 56
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e8 e3       	ldi	r30, 0x38	; 56
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_togglePin+0xa4>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_togglePin+0xa0>
    1448:	84 27       	eor	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	27 c0       	rjmp	.+78     	; 0x149c <GPIO_togglePin+0xfc>
	  break;
	case PORTC_ID:
	  TOGGLE_BIT(PORTC, pin_num);
    144e:	a5 e3       	ldi	r26, 0x35	; 53
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_togglePin+0xcc>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_togglePin+0xc8>
    1470:	84 27       	eor	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	13 c0       	rjmp	.+38     	; 0x149c <GPIO_togglePin+0xfc>
	  break;
	case PORTD_ID:
	  TOGGLE_BIT(PORTD, pin_num);
    1476:	a2 e3       	ldi	r26, 0x32	; 50
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_togglePin+0xf4>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_togglePin+0xf0>
    1498:	84 27       	eor	r24, r20
    149a:	8c 93       	st	X, r24
	  break;
	}
    }
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <GPIO_readPin>:
 * @param pin_num Pin number (0 to NUM_OF_PINS_PER_PORT-1)
 *
 * @return Value of the pin (LOGIC_HIGH or LOGIC_LOW)
 */
uint8 GPIO_readPin (uint8 port_num, uint8 pin_num)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <GPIO_readPin+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <GPIO_readPin+0x8>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
  uint8 pin_value = LOGIC_LOW;
    14bc:	19 82       	std	Y+1, r1	; 0x01

  /* Check if the input port or pin number is invalid */
  if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 30       	cpi	r24, 0x08	; 8
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <GPIO_readPin+0x1c>
    14c4:	7d c0       	rjmp	.+250    	; 0x15c0 <GPIO_readPin+0x116>
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <GPIO_readPin+0x24>
    14cc:	79 c0       	rjmp	.+242    	; 0x15c0 <GPIO_readPin+0x116>
      /* Do Nothing */
    }
  else
    {
      /* Read the pin value as required */
      switch (port_num)
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3d 83       	std	Y+5, r19	; 0x05
    14d6:	2c 83       	std	Y+4, r18	; 0x04
    14d8:	4c 81       	ldd	r20, Y+4	; 0x04
    14da:	5d 81       	ldd	r21, Y+5	; 0x05
    14dc:	41 30       	cpi	r20, 0x01	; 1
    14de:	51 05       	cpc	r21, r1
    14e0:	71 f1       	breq	.+92     	; 0x153e <GPIO_readPin+0x94>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	91 05       	cpc	r25, r1
    14ea:	34 f4       	brge	.+12     	; 0x14f8 <GPIO_readPin+0x4e>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	21 15       	cp	r18, r1
    14f2:	31 05       	cpc	r19, r1
    14f4:	69 f0       	breq	.+26     	; 0x1510 <GPIO_readPin+0x66>
    14f6:	64 c0       	rjmp	.+200    	; 0x15c0 <GPIO_readPin+0x116>
    14f8:	4c 81       	ldd	r20, Y+4	; 0x04
    14fa:	5d 81       	ldd	r21, Y+5	; 0x05
    14fc:	42 30       	cpi	r20, 0x02	; 2
    14fe:	51 05       	cpc	r21, r1
    1500:	a1 f1       	breq	.+104    	; 0x156a <GPIO_readPin+0xc0>
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <GPIO_readPin+0x64>
    150c:	44 c0       	rjmp	.+136    	; 0x1596 <GPIO_readPin+0xec>
    150e:	58 c0       	rjmp	.+176    	; 0x15c0 <GPIO_readPin+0x116>
	{
	case PORTA_ID:
	  if (BIT_IS_SET(PINA, pin_num))
    1510:	e9 e3       	ldi	r30, 0x39	; 57
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a9 01       	movw	r20, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <GPIO_readPin+0x7e>
    1524:	55 95       	asr	r21
    1526:	47 95       	ror	r20
    1528:	8a 95       	dec	r24
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <GPIO_readPin+0x7a>
    152c:	ca 01       	movw	r24, r20
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	88 23       	and	r24, r24
    1534:	09 f4       	brne	.+2      	; 0x1538 <GPIO_readPin+0x8e>
    1536:	44 c0       	rjmp	.+136    	; 0x15c0 <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	41 c0       	rjmp	.+130    	; 0x15c0 <GPIO_readPin+0x116>
	    }
	  break;
	case PORTB_ID:
	  if (BIT_IS_SET(PINB, pin_num))
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a9 01       	movw	r20, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <GPIO_readPin+0xac>
    1552:	55 95       	asr	r21
    1554:	47 95       	ror	r20
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <GPIO_readPin+0xa8>
    155a:	ca 01       	movw	r24, r20
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	90 70       	andi	r25, 0x00	; 0
    1560:	88 23       	and	r24, r24
    1562:	71 f1       	breq	.+92     	; 0x15c0 <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	2b c0       	rjmp	.+86     	; 0x15c0 <GPIO_readPin+0x116>
	    }
	  break;
	case PORTC_ID:
	  if (BIT_IS_SET(PINC, pin_num))
    156a:	e3 e3       	ldi	r30, 0x33	; 51
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a9 01       	movw	r20, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_readPin+0xd8>
    157e:	55 95       	asr	r21
    1580:	47 95       	ror	r20
    1582:	8a 95       	dec	r24
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_readPin+0xd4>
    1586:	ca 01       	movw	r24, r20
    1588:	81 70       	andi	r24, 0x01	; 1
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	88 23       	and	r24, r24
    158e:	c1 f0       	breq	.+48     	; 0x15c0 <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	15 c0       	rjmp	.+42     	; 0x15c0 <GPIO_readPin+0x116>
	    }
	  break;
	case PORTD_ID:
	  if (BIT_IS_SET(PIND, pin_num))
    1596:	e0 e3       	ldi	r30, 0x30	; 48
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <GPIO_readPin+0x104>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <GPIO_readPin+0x100>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	88 23       	and	r24, r24
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <GPIO_readPin+0x116>
	    {
	      pin_value = LOGIC_HIGH;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	89 83       	std	Y+1, r24	; 0x01
	    }
	  break;
	}
    }

  return pin_value;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <GPIO_setupPortDirection>:
 *
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param direction Direction of the port (PORT_INPUT or PORT_OUTPUT)
 */
void GPIO_setupPortDirection (uint8 port_num, GPIO_PortDirectionType direction)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <GPIO_setupPortDirection+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <GPIO_setupPortDirection+0x8>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	6a 83       	std	Y+2, r22	; 0x02
  /* Check if the input port number is invalid */
  if (port_num >= NUM_OF_PORTS)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	90 f5       	brcc	.+100    	; 0x164c <GPIO_setupPortDirection+0x7a>
      /* Do Nothing */
    }
  else
    {
      /* Setup the port direction as required */
      switch (port_num)
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3c 83       	std	Y+4, r19	; 0x04
    15f0:	2b 83       	std	Y+3, r18	; 0x03
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	d1 f0       	breq	.+52     	; 0x1630 <GPIO_setupPortDirection+0x5e>
    15fc:	2b 81       	ldd	r18, Y+3	; 0x03
    15fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <GPIO_setupPortDirection+0x3e>
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 f0       	breq	.+24     	; 0x1626 <GPIO_setupPortDirection+0x54>
    160e:	1e c0       	rjmp	.+60     	; 0x164c <GPIO_setupPortDirection+0x7a>
    1610:	2b 81       	ldd	r18, Y+3	; 0x03
    1612:	3c 81       	ldd	r19, Y+4	; 0x04
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	81 f0       	breq	.+32     	; 0x163a <GPIO_setupPortDirection+0x68>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	81 f0       	breq	.+32     	; 0x1644 <GPIO_setupPortDirection+0x72>
    1624:	13 c0       	rjmp	.+38     	; 0x164c <GPIO_setupPortDirection+0x7a>
	{
	case PORTA_ID:
	  DDRA = direction;
    1626:	ea e3       	ldi	r30, 0x3A	; 58
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	80 83       	st	Z, r24
    162e:	0e c0       	rjmp	.+28     	; 0x164c <GPIO_setupPortDirection+0x7a>
	  break;
	case PORTB_ID:
	  DDRB = direction;
    1630:	e7 e3       	ldi	r30, 0x37	; 55
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	80 83       	st	Z, r24
    1638:	09 c0       	rjmp	.+18     	; 0x164c <GPIO_setupPortDirection+0x7a>
	  break;
	case PORTC_ID:
	  DDRC = direction;
    163a:	e4 e3       	ldi	r30, 0x34	; 52
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	80 83       	st	Z, r24
    1642:	04 c0       	rjmp	.+8      	; 0x164c <GPIO_setupPortDirection+0x7a>
	  break;
	case PORTD_ID:
	  DDRD = direction;
    1644:	e1 e3       	ldi	r30, 0x31	; 49
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 83       	st	Z, r24
	  break;
	}
    }
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <GPIO_writePort>:
 *
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 * @param value Value to write to the port (0 to 255)
 */
void GPIO_writePort (uint8 port_num, uint8 value)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <GPIO_writePort+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <GPIO_writePort+0x8>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	6a 83       	std	Y+2, r22	; 0x02
  /* Check if the input port number is invalid */
  if (port_num >= NUM_OF_PORTS)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	90 f5       	brcc	.+100    	; 0x16d4 <GPIO_writePort+0x7a>
      /* Do Nothing */
    }
  else
    {
      /* Write the port value as required */
      switch (port_num)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3c 83       	std	Y+4, r19	; 0x04
    1678:	2b 83       	std	Y+3, r18	; 0x03
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	d1 f0       	breq	.+52     	; 0x16b8 <GPIO_writePort+0x5e>
    1684:	2b 81       	ldd	r18, Y+3	; 0x03
    1686:	3c 81       	ldd	r19, Y+4	; 0x04
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	2c f4       	brge	.+10     	; 0x1698 <GPIO_writePort+0x3e>
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	61 f0       	breq	.+24     	; 0x16ae <GPIO_writePort+0x54>
    1696:	1e c0       	rjmp	.+60     	; 0x16d4 <GPIO_writePort+0x7a>
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	3c 81       	ldd	r19, Y+4	; 0x04
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <GPIO_writePort+0x68>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	81 f0       	breq	.+32     	; 0x16cc <GPIO_writePort+0x72>
    16ac:	13 c0       	rjmp	.+38     	; 0x16d4 <GPIO_writePort+0x7a>
	{
	case PORTA_ID:
	  PORTA = value;
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <GPIO_writePort+0x7a>
	  break;
	case PORTB_ID:
	  PORTB = value;
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	80 83       	st	Z, r24
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <GPIO_writePort+0x7a>
	  break;
	case PORTC_ID:
	  PORTC = value;
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	80 83       	st	Z, r24
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <GPIO_writePort+0x7a>
	  break;
	case PORTD_ID:
	  PORTD = value;
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	80 83       	st	Z, r24
	  break;
	}
    }
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <GPIO_readPort>:
 * @param port_num Port number (0 to NUM_OF_PORTS-1)
 *
 * @return Value of the port (0 to 255)
 */
uint8 GPIO_readPort (uint8 port_num)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_readPort+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_readPort+0x8>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8a 83       	std	Y+2, r24	; 0x02
  uint8 value = LOGIC_LOW;
    16f0:	19 82       	std	Y+1, r1	; 0x01

  /* Check if the input port number is invalid */
  if (port_num >= NUM_OF_PORTS)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	90 f5       	brcc	.+100    	; 0x175c <GPIO_readPort+0x7a>
      /* Do Nothing */
    }
  else
    {
      /* Read the port value as required */
      switch (port_num)
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	3c 83       	std	Y+4, r19	; 0x04
    1700:	2b 83       	std	Y+3, r18	; 0x03
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	91 05       	cpc	r25, r1
    170a:	d1 f0       	breq	.+52     	; 0x1740 <GPIO_readPort+0x5e>
    170c:	2b 81       	ldd	r18, Y+3	; 0x03
    170e:	3c 81       	ldd	r19, Y+4	; 0x04
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	2c f4       	brge	.+10     	; 0x1720 <GPIO_readPort+0x3e>
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	61 f0       	breq	.+24     	; 0x1736 <GPIO_readPort+0x54>
    171e:	1e c0       	rjmp	.+60     	; 0x175c <GPIO_readPort+0x7a>
    1720:	2b 81       	ldd	r18, Y+3	; 0x03
    1722:	3c 81       	ldd	r19, Y+4	; 0x04
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	81 f0       	breq	.+32     	; 0x174a <GPIO_readPort+0x68>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	91 05       	cpc	r25, r1
    1732:	81 f0       	breq	.+32     	; 0x1754 <GPIO_readPort+0x72>
    1734:	13 c0       	rjmp	.+38     	; 0x175c <GPIO_readPort+0x7a>
	{
	case PORTA_ID:
	  value = PINA;
    1736:	e9 e3       	ldi	r30, 0x39	; 57
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	0e c0       	rjmp	.+28     	; 0x175c <GPIO_readPort+0x7a>
	  break;
	case PORTB_ID:
	  value = PINB;
    1740:	e6 e3       	ldi	r30, 0x36	; 54
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	09 c0       	rjmp	.+18     	; 0x175c <GPIO_readPort+0x7a>
	  break;
	case PORTC_ID:
	  value = PINC;
    174a:	e3 e3       	ldi	r30, 0x33	; 51
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	04 c0       	rjmp	.+8      	; 0x175c <GPIO_readPort+0x7a>
	  break;
	case PORTD_ID:
	  value = PIND;
    1754:	e0 e3       	ldi	r30, 0x30	; 48
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	89 83       	std	Y+1, r24	; 0x01
	  break;
	}
    }

  return value;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <ADC_init>:

/*
 * Description:
 * Initializes the ADC according to the configuration settings in the ADC_t structure.
 */
void ADC_init(ADC_t *adc_obj) {
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <ADC_init+0x6>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
  /* Disable the ADC */
  CLEAR_BIT(ADCSRA, ADEN);
    177a:	a6 e2       	ldi	r26, 0x26	; 38
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e6 e2       	ldi	r30, 0x26	; 38
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 77       	andi	r24, 0x7F	; 127
    1786:	8c 93       	st	X, r24

  /* Set Voltage Reference Source */
  ADMUXbits.refs = adc_obj->vreffSource;
    1788:	a7 e2       	ldi	r26, 0x27	; 39
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	80 81       	ld	r24, Z
    1792:	83 70       	andi	r24, 0x03	; 3
    1794:	98 2f       	mov	r25, r24
    1796:	92 95       	swap	r25
    1798:	99 0f       	add	r25, r25
    179a:	99 0f       	add	r25, r25
    179c:	90 7c       	andi	r25, 0xC0	; 192
    179e:	8c 91       	ld	r24, X
    17a0:	8f 73       	andi	r24, 0x3F	; 63
    17a2:	89 2b       	or	r24, r25
    17a4:	8c 93       	st	X, r24

  /* Set ADC Prescaler */
  ADCSRAbits.adps = adc_obj->prescaller;
    17a6:	a6 e2       	ldi	r26, 0x26	; 38
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e9 81       	ldd	r30, Y+1	; 0x01
    17ac:	fa 81       	ldd	r31, Y+2	; 0x02
    17ae:	80 81       	ld	r24, Z
    17b0:	86 95       	lsr	r24
    17b2:	86 95       	lsr	r24
    17b4:	87 70       	andi	r24, 0x07	; 7
    17b6:	98 2f       	mov	r25, r24
    17b8:	97 70       	andi	r25, 0x07	; 7
    17ba:	8c 91       	ld	r24, X
    17bc:	88 7f       	andi	r24, 0xF8	; 248
    17be:	89 2b       	or	r24, r25
    17c0:	8c 93       	st	X, r24

  /* Enable the ADC */
  SET_BIT(ADCSRA, ADEN);
    17c2:	a6 e2       	ldi	r26, 0x26	; 38
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e6 e2       	ldi	r30, 0x26	; 38
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 68       	ori	r24, 0x80	; 128
    17ce:	8c 93       	st	X, r24
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <ADC_readChannel>:

/*
 * Description:
 * Starts ADC conversion on a specific channel without blocking.
 */
boolean ADC_readChannel(uint8 channel) {
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <ADC_readChannel+0x6>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	8a 83       	std	Y+2, r24	; 0x02

  uint8 ret = 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	89 83       	std	Y+1, r24	; 0x01

  if (ADC_isDone()) {
    17ea:	e6 e2       	ldi	r30, 0x26	; 38
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	82 95       	swap	r24
    17f2:	86 95       	lsr	r24
    17f4:	86 95       	lsr	r24
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	91 f4       	brne	.+36     	; 0x1828 <ADC_readChannel+0x4e>
    /* Set the ADC channel */
    ADMUXbits.mux = channel;
    1804:	e7 e2       	ldi	r30, 0x27	; 39
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	8f 71       	andi	r24, 0x1F	; 31
    180c:	98 2f       	mov	r25, r24
    180e:	9f 71       	andi	r25, 0x1F	; 31
    1810:	80 81       	ld	r24, Z
    1812:	80 7e       	andi	r24, 0xE0	; 224
    1814:	89 2b       	or	r24, r25
    1816:	80 83       	st	Z, r24

    /* Start ADC Conversion */
    SET_BIT(ADCSRA, ADSC);
    1818:	a6 e2       	ldi	r26, 0x26	; 38
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e6 e2       	ldi	r30, 0x26	; 38
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	80 64       	ori	r24, 0x40	; 64
    1824:	8c 93       	st	X, r24
    1826:	01 c0       	rjmp	.+2      	; 0x182a <ADC_readChannel+0x50>
  }
  else {
    ret = 0;
    1828:	19 82       	std	Y+1, r1	; 0x01
  }
  return ret;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <ADC_readChannelBlocking>:
/*
 * Description:
 * Starts ADC conversion on a specific channel and waits for conversion to complete.
 * Returns the converted value.
 */
uint16 ADC_readChannelBlocking(uint8 channel) {
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
  /* Start conversion */
  while (ADC_readChannel(channel) == 0)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	0e 94 ed 0b 	call	0x17da	; 0x17da <ADC_readChannel>
    1848:	88 23       	and	r24, r24
    184a:	d9 f3       	breq	.-10     	; 0x1842 <ADC_readChannelBlocking+0xc>
    ;

  /* Wait while conversion is in progress */
  while (!GET_BIT(ADCSRA, ADIF))
    184c:	e6 e2       	ldi	r30, 0x26	; 38
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	82 95       	swap	r24
    1854:	8f 70       	andi	r24, 0x0F	; 15
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	81 70       	andi	r24, 0x01	; 1
    185c:	90 70       	andi	r25, 0x00	; 0
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	a9 f3       	breq	.-22     	; 0x184c <ADC_readChannelBlocking+0x16>
    ;

#ifndef ADC_ENABLE_INTERRUPT
  /* Clear flag after conversion */
  SET_BIT(ADCSRA, ADIF);
    1862:	a6 e2       	ldi	r26, 0x26	; 38
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e6 e2       	ldi	r30, 0x26	; 38
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 61       	ori	r24, 0x10	; 16
    186e:	8c 93       	st	X, r24
#endif

  /* Return the ADC result */
  return ADC;
    1870:	e4 e2       	ldi	r30, 0x24	; 36
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
}
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <MOTOR_init>:
 * @brief Initializes the motor control system.
 *
 * This function initializes the LM35 temperature sensor and the DC motor driver.
 * It also sets the initial direction of the motor to DCMOTOR_DIR_1.
 */
void MOTOR_init(void) {
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
  LM35_init(&g_lm35_1);           // Initialize the LM35 temperature sensor
    1888:	80 eb       	ldi	r24, 0xB0	; 176
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LM35_init>
  DCMOTOR_init(&g_dcmotor);       // Initialize the DC motor driver
    1890:	8d eb       	ldi	r24, 0xBD	; 189
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 51 14 	call	0x28a2	; 0x28a2 <DCMOTOR_init>
  DCMOTOR_setDir(&g_dcmotor, DCMOTOR_DIR_1); // Set the initial motor direction
    1898:	8d eb       	ldi	r24, 0xBD	; 189
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	0e 94 9c 14 	call	0x2938	; 0x2938 <DCMOTOR_setDir>
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <MOTOR_handleTemperature>:
 * @brief Adjusts the motor speed based on the current temperature.
 *
 * This function reads the current temperature from the LM35 sensor and adjusts
 * the DC motor speed according to predefined temperature thresholds.
 */
void MOTOR_handleTemperature() {
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
  g_temprature = LM35_getTemp(&g_lm35_1); // Get the current temperature
    18b0:	80 eb       	ldi	r24, 0xB0	; 176
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LM35_getTemp>
    18b8:	80 93 c3 01 	sts	0x01C3, r24

  // Adjust the motor speed based on temperature thresholds
  if (g_temprature < TEMP_LEVEL1) {
    18bc:	80 91 c3 01 	lds	r24, 0x01C3
    18c0:	89 31       	cpi	r24, 0x19	; 25
    18c2:	20 f4       	brcc	.+8      	; 0x18cc <MOTOR_handleTemperature+0x24>
    DCMOTOR_setSpeed(MOTOR_SPEED_LEVEL0_STOP); // Stop the motor
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <DCMOTOR_setSpeed>
    18ca:	1b c0       	rjmp	.+54     	; 0x1902 <MOTOR_handleTemperature+0x5a>
  }
  else if (g_temprature < TEMP_LEVEL2) {
    18cc:	80 91 c3 01 	lds	r24, 0x01C3
    18d0:	8e 31       	cpi	r24, 0x1E	; 30
    18d2:	20 f4       	brcc	.+8      	; 0x18dc <MOTOR_handleTemperature+0x34>
    DCMOTOR_setSpeed(MOTOR_SPEED_LEVEL1); // Set motor speed to 25%
    18d4:	89 e1       	ldi	r24, 0x19	; 25
    18d6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <DCMOTOR_setSpeed>
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <MOTOR_handleTemperature+0x5a>
  }
  else if (g_temprature < TEMP_LEVEL3) {
    18dc:	80 91 c3 01 	lds	r24, 0x01C3
    18e0:	83 32       	cpi	r24, 0x23	; 35
    18e2:	20 f4       	brcc	.+8      	; 0x18ec <MOTOR_handleTemperature+0x44>
    DCMOTOR_setSpeed(MOTOR_SPEED_LEVEL2); // Set motor speed to 50%
    18e4:	82 e3       	ldi	r24, 0x32	; 50
    18e6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <DCMOTOR_setSpeed>
    18ea:	0b c0       	rjmp	.+22     	; 0x1902 <MOTOR_handleTemperature+0x5a>
  }
  else if (g_temprature < TEMP_LEVEL4) {
    18ec:	80 91 c3 01 	lds	r24, 0x01C3
    18f0:	88 32       	cpi	r24, 0x28	; 40
    18f2:	20 f4       	brcc	.+8      	; 0x18fc <MOTOR_handleTemperature+0x54>
    DCMOTOR_setSpeed(MOTOR_SPEED_LEVEL3); // Set motor speed to 75%
    18f4:	8b e4       	ldi	r24, 0x4B	; 75
    18f6:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <DCMOTOR_setSpeed>
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <MOTOR_handleTemperature+0x5a>
  }
  else {
    DCMOTOR_setSpeed(MOTOR_SPEED_LEVEL4_MAX); // Set motor speed to 100%
    18fc:	84 e6       	ldi	r24, 0x64	; 100
    18fe:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <DCMOTOR_setSpeed>
  }
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <LIGHT_init>:
 * @brief Initializes the light sensor and the associated LEDs.
 *
 * This function sets up the LEDs and the light sensor (LDR) to start measuring
 * light intensity and adjusting LED states accordingly.
 */
void LIGHT_init(void) {
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
  /* Initialize the red LED */
  LED_init(&g_ledRed);
    1910:	81 eb       	ldi	r24, 0xB1	; 177
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LED_init>
  /* Initialize the green LED */
  LED_init(&g_ledGreen);
    1918:	82 eb       	ldi	r24, 0xB2	; 178
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LED_init>
  /* Initialize the blue LED */
  LED_init(&g_ledBlue);
    1920:	83 eb       	ldi	r24, 0xB3	; 179
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LED_init>

  /* Initialize the LDR (light sensor) */
  LDR_init(&g_ldr1);
    1928:	84 eb       	ldi	r24, 0xB4	; 180
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LDR_init>
}
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <LIGHT_handleIntensity>:
 * @brief Handles light intensity changes and controls the LEDs.
 *
 * This function reads the current light intensity from the light sensor (LDR),
 * and based on predefined thresholds, it adjusts the state of the LEDs.
 */
void LIGHT_handleIntensity(void) {
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62

  /* Get the current light intensity from the LDR */
  g_lightIntensity = LDR_getIntensity(&g_ldr1);
    193e:	84 eb       	ldi	r24, 0xB4	; 180
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LDR_getIntensity>
    1946:	80 93 c4 01 	sts	0x01C4, r24

  /* Check if light intensity is below the first threshold (LIGHT_LEVEL1) */
  if (g_lightIntensity < LIGHT_LEVEL1) {
    194a:	80 91 c4 01 	lds	r24, 0x01C4
    194e:	8f 30       	cpi	r24, 0x0F	; 15
    1950:	68 f4       	brcc	.+26     	; 0x196c <LIGHT_handleIntensity+0x36>
    /* If it's dark (low intensity), turn on all LEDs (Red, Green, Blue) */
    LED_turnOn(&g_ledRed);
    1952:	81 eb       	ldi	r24, 0xB1	; 177
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LED_turnOn>
    LED_turnOn(&g_ledGreen);
    195a:	82 eb       	ldi	r24, 0xB2	; 178
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LED_turnOn>
    LED_turnOn(&g_ledBlue);
    1962:	83 eb       	ldi	r24, 0xB3	; 179
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LED_turnOn>
    196a:	2e c0       	rjmp	.+92     	; 0x19c8 <LIGHT_handleIntensity+0x92>
  }
  /* Check if light intensity is between the first and second thresholds */
  else if (g_lightIntensity < LIGHT_LEVEL2) {
    196c:	80 91 c4 01 	lds	r24, 0x01C4
    1970:	82 33       	cpi	r24, 0x32	; 50
    1972:	68 f4       	brcc	.+26     	; 0x198e <LIGHT_handleIntensity+0x58>
    /* Turn on Red and Green LEDs, turn off Blue LED */
    LED_turnOn(&g_ledRed);
    1974:	81 eb       	ldi	r24, 0xB1	; 177
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LED_turnOn>
    LED_turnOn(&g_ledGreen);
    197c:	82 eb       	ldi	r24, 0xB2	; 178
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LED_turnOn>
    LED_turnOff(&g_ledBlue);
    1984:	83 eb       	ldi	r24, 0xB3	; 179
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LED_turnOff>
    198c:	1d c0       	rjmp	.+58     	; 0x19c8 <LIGHT_handleIntensity+0x92>
  }
  /* Check if light intensity is between the second and third thresholds */
  else if (g_lightIntensity < LIGHT_LEVEL3) {
    198e:	80 91 c4 01 	lds	r24, 0x01C4
    1992:	86 34       	cpi	r24, 0x46	; 70
    1994:	68 f4       	brcc	.+26     	; 0x19b0 <LIGHT_handleIntensity+0x7a>
    /* Turn on Red LED, turn off Green and Blue LEDs */
    LED_turnOn(&g_ledRed);
    1996:	81 eb       	ldi	r24, 0xB1	; 177
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LED_turnOn>
    LED_turnOff(&g_ledGreen);
    199e:	82 eb       	ldi	r24, 0xB2	; 178
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LED_turnOff>
    LED_turnOff(&g_ledBlue);
    19a6:	83 eb       	ldi	r24, 0xB3	; 179
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LED_turnOff>
    19ae:	0c c0       	rjmp	.+24     	; 0x19c8 <LIGHT_handleIntensity+0x92>
  }
  /* If light intensity is above the third threshold (very bright) */
  else {
    /* Turn off all LEDs (Red, Green, Blue) */
    LED_turnOff(&g_ledRed);
    19b0:	81 eb       	ldi	r24, 0xB1	; 177
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LED_turnOff>
    LED_turnOff(&g_ledGreen);
    19b8:	82 eb       	ldi	r24, 0xB2	; 178
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LED_turnOff>
    LED_turnOff(&g_ledBlue);
    19c0:	83 eb       	ldi	r24, 0xB3	; 179
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <LED_turnOff>
  }
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <LM35_init>:
 * to get the initial temperature reading.
 *
 * @param lm35 Pointer to a structure of type `LM35_t` that holds the configuration settings for the LM35.
 */
void LM35_init(LM35_t *lm35)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <LM35_init+0x6>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
  ADC_init(&g_adc1);                              /* Initialize the ADC module */
    19dc:	8f ea       	ldi	r24, 0xAF	; 175
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	0e 94 b6 0b 	call	0x176c	; 0x176c <ADC_init>
  GPIO_setupPinDirection(lm35->port, lm35->pin, PIN_INPUT); /* Set the LM35 pin as input */
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	80 81       	ld	r24, Z
    19ea:	83 70       	andi	r24, 0x03	; 3
    19ec:	28 2f       	mov	r18, r24
    19ee:	e9 81       	ldd	r30, Y+1	; 0x01
    19f0:	fa 81       	ldd	r31, Y+2	; 0x02
    19f2:	80 81       	ld	r24, Z
    19f4:	86 95       	lsr	r24
    19f6:	86 95       	lsr	r24
    19f8:	87 70       	andi	r24, 0x07	; 7
    19fa:	98 2f       	mov	r25, r24
    19fc:	82 2f       	mov	r24, r18
    19fe:	69 2f       	mov	r22, r25
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

  LM35_getTemp(&g_lm35_1);                       /* Retrieve the initial temperature value */
    1a06:	80 eb       	ldi	r24, 0xB0	; 176
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LM35_getTemp>
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LM35_getTemp>:
 *
 * @param lm35 Pointer to the LM35 configuration structure.
 * @return `uint8` The temperature in degrees Celsius measured by the LM35.
 */
uint8 LM35_getTemp(LM35_t *lm35)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <LM35_getTemp+0x6>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <LM35_getTemp+0x8>
    1a20:	0f 92       	push	r0
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	9d 83       	std	Y+5, r25	; 0x05
    1a28:	8c 83       	std	Y+4, r24	; 0x04
  uint8 temp_val = 0;                             /* Variable to hold the calculated temperature value */
    1a2a:	1b 82       	std	Y+3, r1	; 0x03
  uint16 adc_value = 0;                           /* Variable to store the ADC value */
    1a2c:	1a 82       	std	Y+2, r1	; 0x02
    1a2e:	19 82       	std	Y+1, r1	; 0x01

  adc_value = ADC_readChannelBlocking(lm35->pin); /* Read the ADC value for the specified pin */
    1a30:	ec 81       	ldd	r30, Y+4	; 0x04
    1a32:	fd 81       	ldd	r31, Y+5	; 0x05
    1a34:	80 81       	ld	r24, Z
    1a36:	86 95       	lsr	r24
    1a38:	86 95       	lsr	r24
    1a3a:	87 70       	andi	r24, 0x07	; 7
    1a3c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <ADC_readChannelBlocking>
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01

  /* Convert the ADC value to temperature in degrees Celsius */
  temp_val = (uint8) (((uint32) adc_value * LM35_MAX_TEMPERATURE * ADC_REF_VOLT_VALUE)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	cc 01       	movw	r24, r24
    1a4a:	a0 e0       	ldi	r26, 0x00	; 0
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	26 e9       	ldi	r18, 0x96	; 150
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__mulsi3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	2a e0       	ldi	r18, 0x0A	; 10
    1a74:	37 ed       	ldi	r19, 0xD7	; 215
    1a76:	43 e2       	ldi	r20, 0x23	; 35
    1a78:	50 e4       	ldi	r21, 0x40	; 64
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 ed       	ldi	r19, 0xD0	; 208
    1a8a:	4f eb       	ldi	r20, 0xBF	; 191
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
      / (ADC_MAXIMUM_VALUE * LM35_MAX_VOLT_VALUE));

  return temp_val;                                 /* Return the calculated temperature */
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <LED_init>:
 *
 * This function configures the GPIO pin for the LED as an output.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_init(LED_t *led) {
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <LED_init+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
  GPIO_setupPinDirection(led->port, led->pin, PIN_OUTPUT);  /* Set the pin direction to output */
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	80 81       	ld	r24, Z
    1aca:	83 70       	andi	r24, 0x03	; 3
    1acc:	28 2f       	mov	r18, r24
    1ace:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad2:	80 81       	ld	r24, Z
    1ad4:	86 95       	lsr	r24
    1ad6:	86 95       	lsr	r24
    1ad8:	87 70       	andi	r24, 0x07	; 7
    1ada:	98 2f       	mov	r25, r24
    1adc:	82 2f       	mov	r24, r18
    1ade:	69 2f       	mov	r22, r25
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LED_turnOn>:
 *
 * This function activates the LED based on its logic configuration.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_turnOn(LED_t *led) {
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <LED_turnOn+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
  GPIO_writePin(led->port, led->pin, LOGIC_HIGH ^ led->ledLogic);  /* Write the appropriate logic level to turn on the LED */
    1afe:	e9 81       	ldd	r30, Y+1	; 0x01
    1b00:	fa 81       	ldd	r31, Y+2	; 0x02
    1b02:	80 81       	ld	r24, Z
    1b04:	83 70       	andi	r24, 0x03	; 3
    1b06:	38 2f       	mov	r19, r24
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	80 81       	ld	r24, Z
    1b0e:	86 95       	lsr	r24
    1b10:	86 95       	lsr	r24
    1b12:	87 70       	andi	r24, 0x07	; 7
    1b14:	28 2f       	mov	r18, r24
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	80 81       	ld	r24, Z
    1b1c:	82 95       	swap	r24
    1b1e:	86 95       	lsr	r24
    1b20:	87 70       	andi	r24, 0x07	; 7
    1b22:	81 70       	andi	r24, 0x01	; 1
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	89 27       	eor	r24, r25
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	83 2f       	mov	r24, r19
    1b2e:	62 2f       	mov	r22, r18
    1b30:	49 2f       	mov	r20, r25
    1b32:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <LED_turnOff>:
 *
 * This function deactivates the LED based on its logic configuration.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_turnOff(LED_t *led) {
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <LED_turnOff+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
  GPIO_writePin(led->port, led->pin, LOGIC_LOW ^ led->ledLogic);   /* Write the appropriate logic level to turn off the LED */
    1b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b50:	fa 81       	ldd	r31, Y+2	; 0x02
    1b52:	80 81       	ld	r24, Z
    1b54:	83 70       	andi	r24, 0x03	; 3
    1b56:	38 2f       	mov	r19, r24
    1b58:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5c:	80 81       	ld	r24, Z
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	87 70       	andi	r24, 0x07	; 7
    1b64:	28 2f       	mov	r18, r24
    1b66:	e9 81       	ldd	r30, Y+1	; 0x01
    1b68:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6a:	80 81       	ld	r24, Z
    1b6c:	82 95       	swap	r24
    1b6e:	86 95       	lsr	r24
    1b70:	87 70       	andi	r24, 0x07	; 7
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	98 2f       	mov	r25, r24
    1b76:	83 2f       	mov	r24, r19
    1b78:	62 2f       	mov	r22, r18
    1b7a:	49 2f       	mov	r20, r25
    1b7c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <LED_toggle>:
 * This function changes the LED state from on to off or vice versa based
 * on its logic configuration.
 *
 * @param led Pointer to the LED configuration structure.
 */
void LED_toggle(LED_t *led) {
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <LED_toggle+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
  GPIO_togglePin(led->port, led->pin);  /* Toggle the pin state */
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	80 81       	ld	r24, Z
    1b9e:	83 70       	andi	r24, 0x03	; 3
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba6:	80 81       	ld	r24, Z
    1ba8:	86 95       	lsr	r24
    1baa:	86 95       	lsr	r24
    1bac:	87 70       	andi	r24, 0x07	; 7
    1bae:	98 2f       	mov	r25, r24
    1bb0:	82 2f       	mov	r24, r18
    1bb2:	69 2f       	mov	r22, r25
    1bb4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <GPIO_togglePin>
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <LDR_init>:
 *
 * This function initializes the ADC and sets the GPIO pin direction for the LDR.
 *
 * @param ldr Pointer to a structure of type `LDR_t` that holds the configuration settings for the LDR.
 */
void LDR_init(LDR_t *ldr) {
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <LDR_init+0x6>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    ADC_init(&g_adc1);                          /* Initialize the ADC module */
    1bd0:	8f ea       	ldi	r24, 0xAF	; 175
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	0e 94 b6 0b 	call	0x176c	; 0x176c <ADC_init>
    GPIO_setupPinDirection(ldr->port, ldr->pin, PIN_INPUT); /* Set pin direction as input */
    1bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bda:	fa 81       	ldd	r31, Y+2	; 0x02
    1bdc:	80 81       	ld	r24, Z
    1bde:	83 70       	andi	r24, 0x03	; 3
    1be0:	28 2f       	mov	r18, r24
    1be2:	e9 81       	ldd	r30, Y+1	; 0x01
    1be4:	fa 81       	ldd	r31, Y+2	; 0x02
    1be6:	80 81       	ld	r24, Z
    1be8:	86 95       	lsr	r24
    1bea:	86 95       	lsr	r24
    1bec:	87 70       	andi	r24, 0x07	; 7
    1bee:	98 2f       	mov	r25, r24
    1bf0:	82 2f       	mov	r24, r18
    1bf2:	69 2f       	mov	r22, r25
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <LDR_isLight>:
 * compares it against the threshold to determine if light is present.
 *
 * @param ldr Pointer to the LDR configuration structure.
 * @return uint8 Returns LDR_LIGHT_ON if light is detected, otherwise returns LDR_LIGHT_OFF.
 */
uint8 LDR_isLight(LDR_t *ldr) {
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <LDR_isLight+0x6>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
    return (uint8) (
    1c14:	e9 81       	ldd	r30, Y+1	; 0x01
    1c16:	fa 81       	ldd	r31, Y+2	; 0x02
    1c18:	80 81       	ld	r24, Z
    1c1a:	86 95       	lsr	r24
    1c1c:	86 95       	lsr	r24
    1c1e:	87 70       	andi	r24, 0x07	; 7
    1c20:	0e 94 1b 0c 	call	0x1836	; 0x1836 <ADC_readChannelBlocking>
    1c24:	9c 01       	movw	r18, r24
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	85 81       	ldd	r24, Z+5	; 0x05
    1c2c:	96 81       	ldd	r25, Z+6	; 0x06
    1c2e:	1b 82       	std	Y+3, r1	; 0x03
    1c30:	82 17       	cp	r24, r18
    1c32:	93 07       	cpc	r25, r19
    1c34:	10 f4       	brcc	.+4      	; 0x1c3a <LDR_isLight+0x36>
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	80 81       	ld	r24, Z
    1c40:	82 95       	swap	r24
    1c42:	86 95       	lsr	r24
    1c44:	87 70       	andi	r24, 0x07	; 7
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	89 27       	eor	r24, r25
        (ADC_readChannelBlocking(ldr->pin) > ldr->threshold) ? (LDR_LIGHT_ON) : (LDR_LIGHT_OFF))
        ^ ldr->ldrLogic;  /* XOR with ldrLogic to adjust the return value based on logic configuration */
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <LDR_getIntensity>:
 * defined range based on the ADC value read from the LDR.
 *
 * @param ldr Pointer to the LDR configuration structure.
 * @return uint8 The intensity value of the light detected by the LDR, scaled to a percentage.
 */
uint8 LDR_getIntensity(LDR_t *ldr) {
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <LDR_getIntensity+0xe>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    return (uint8) (
    1c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c70:	fa 81       	ldd	r31, Y+2	; 0x02
    1c72:	80 81       	ld	r24, Z
    1c74:	86 95       	lsr	r24
    1c76:	86 95       	lsr	r24
    1c78:	87 70       	andi	r24, 0x07	; 7
    1c7a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <ADC_readChannelBlocking>
    1c7e:	9c 01       	movw	r18, r24
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	83 81       	ldd	r24, Z+3	; 0x03
    1c86:	94 81       	ldd	r25, Z+4	; 0x04
    1c88:	a9 01       	movw	r20, r18
    1c8a:	48 1b       	sub	r20, r24
    1c8c:	59 0b       	sbc	r21, r25
    1c8e:	ca 01       	movw	r24, r20
    1c90:	cc 01       	movw	r24, r24
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	24 e6       	ldi	r18, 0x64	; 100
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__mulsi3>
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	8c 01       	movw	r16, r24
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	21 81       	ldd	r18, Z+1	; 0x01
    1cb0:	32 81       	ldd	r19, Z+2	; 0x02
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	83 81       	ldd	r24, Z+3	; 0x03
    1cb8:	94 81       	ldd	r25, Z+4	; 0x04
    1cba:	a9 01       	movw	r20, r18
    1cbc:	48 1b       	sub	r20, r24
    1cbe:	59 0b       	sbc	r21, r25
    1cc0:	ca 01       	movw	r24, r20
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	c8 01       	movw	r24, r16
    1cca:	b7 01       	movw	r22, r14
    1ccc:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    1cd0:	da 01       	movw	r26, r20
    1cd2:	c9 01       	movw	r24, r18
        (uint32)(ADC_readChannelBlocking(ldr->pin) - ldr->min) * 100 / (ldr->max - ldr->min)
    );  /* Scale ADC value to percentage based on min and max */
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	08 95       	ret

00001ce6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
  /* Configure the direction for RS and E pins as output pins */
  GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
  GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 ea       	ldi	r26, 0xA0	; 160
    1d14:	b1 e4       	ldi	r27, 0x41	; 65
    1d16:	8b 87       	std	Y+11, r24	; 0x0b
    1d18:	9c 87       	std	Y+12, r25	; 0x0c
    1d1a:	ad 87       	std	Y+13, r26	; 0x0d
    1d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	55 e4       	ldi	r21, 0x45	; 69
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8f 83       	std	Y+7, r24	; 0x07
    1d38:	98 87       	std	Y+8, r25	; 0x08
    1d3a:	a9 87       	std	Y+9, r26	; 0x09
    1d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_init+0x7a>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_init+0xda>
    1da2:	80 e9       	ldi	r24, 0x90	; 144
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_init+0xc8>
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_init+0xbc>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_init+0x104>
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
  /* Configure the data port as output port */
  GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	6f ef       	ldi	r22, 0xFF	; 255
    1df6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <GPIO_setupPortDirection>

  /* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
  LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1dfa:	88 e3       	ldi	r24, 0x38	; 56
    1dfc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>

#endif

  LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e00:	8c e0       	ldi	r24, 0x0C	; 12
    1e02:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
  LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    1e0c:	2e 96       	adiw	r28, 0x0e	; 14
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LCD_sendCommand>:
 * Description: Sends the specified command to the LCD.
 *
 * @param command: The command to be sent.
 */
void LCD_sendCommand(uint8 command)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	e9 97       	sbiw	r28, 0x39	; 57
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	89 af       	std	Y+57, r24	; 0x39
  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e8       	ldi	r26, 0x80	; 128
    1e44:	bf e3       	ldi	r27, 0x3F	; 63
    1e46:	8d ab       	std	Y+53, r24	; 0x35
    1e48:	9e ab       	std	Y+54, r25	; 0x36
    1e4a:	af ab       	std	Y+55, r26	; 0x37
    1e4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e50:	7e a9       	ldd	r23, Y+54	; 0x36
    1e52:	8f a9       	ldd	r24, Y+55	; 0x37
    1e54:	98 ad       	ldd	r25, Y+56	; 0x38
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a e7       	ldi	r20, 0x7A	; 122
    1e5c:	55 e4       	ldi	r21, 0x45	; 69
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	89 ab       	std	Y+49, r24	; 0x31
    1e68:	9a ab       	std	Y+50, r25	; 0x32
    1e6a:	ab ab       	std	Y+51, r26	; 0x33
    1e6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e70:	7a a9       	ldd	r23, Y+50	; 0x32
    1e72:	8b a9       	ldd	r24, Y+51	; 0x33
    1e74:	9c a9       	ldd	r25, Y+52	; 0x34
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <LCD_sendCommand+0x72>
		__ticks = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	8f a7       	std	Y+47, r24	; 0x2f
    1e8e:	3f c0       	rjmp	.+126    	; 0x1f0e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e90:	69 a9       	ldd	r22, Y+49	; 0x31
    1e92:	7a a9       	ldd	r23, Y+50	; 0x32
    1e94:	8b a9       	ldd	r24, Y+51	; 0x33
    1e96:	9c a9       	ldd	r25, Y+52	; 0x34
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	57 e4       	ldi	r21, 0x47	; 71
    1ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	4c f5       	brge	.+82     	; 0x1efa <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1eac:	8f a9       	ldd	r24, Y+55	; 0x37
    1eae:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e2       	ldi	r20, 0x20	; 32
    1eb6:	51 e4       	ldi	r21, 0x41	; 65
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	98 ab       	std	Y+48, r25	; 0x30
    1ece:	8f a7       	std	Y+47, r24	; 0x2f
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <LCD_sendCommand+0xd2>
    1ed2:	80 e9       	ldi	r24, 0x90	; 144
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	9e a7       	std	Y+46, r25	; 0x2e
    1ed8:	8d a7       	std	Y+45, r24	; 0x2d
    1eda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1edc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_sendCommand+0xc0>
    1ee2:	9e a7       	std	Y+46, r25	; 0x2e
    1ee4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	98 ab       	std	Y+48, r25	; 0x30
    1eee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <LCD_sendCommand+0xb4>
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efa:	69 a9       	ldd	r22, Y+49	; 0x31
    1efc:	7a a9       	ldd	r23, Y+50	; 0x32
    1efe:	8b a9       	ldd	r24, Y+51	; 0x33
    1f00:	9c a9       	ldd	r25, Y+52	; 0x34
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	98 ab       	std	Y+48, r25	; 0x30
    1f0c:	8f a7       	std	Y+47, r24	; 0x2f
    1f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f10:	98 a9       	ldd	r25, Y+48	; 0x30
    1f12:	9c a7       	std	Y+44, r25	; 0x2c
    1f14:	8b a7       	std	Y+43, r24	; 0x2b
    1f16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_sendCommand+0xfc>
    1f1e:	9c a7       	std	Y+44, r25	; 0x2c
    1f20:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(1); /* delay for processing Tas = 50ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a0 e8       	ldi	r26, 0x80	; 128
    1f32:	bf e3       	ldi	r27, 0x3F	; 63
    1f34:	8f a3       	std	Y+39, r24	; 0x27
    1f36:	98 a7       	std	Y+40, r25	; 0x28
    1f38:	a9 a7       	std	Y+41, r26	; 0x29
    1f3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f40:	89 a5       	ldd	r24, Y+41	; 0x29
    1f42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a e7       	ldi	r20, 0x7A	; 122
    1f4a:	55 e4       	ldi	r21, 0x45	; 69
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	8b a3       	std	Y+35, r24	; 0x23
    1f56:	9c a3       	std	Y+36, r25	; 0x24
    1f58:	ad a3       	std	Y+37, r26	; 0x25
    1f5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f60:	8d a1       	ldd	r24, Y+37	; 0x25
    1f62:	9e a1       	ldd	r25, Y+38	; 0x26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e8       	ldi	r20, 0x80	; 128
    1f6a:	5f e3       	ldi	r21, 0x3F	; 63
    1f6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f70:	88 23       	and	r24, r24
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <LCD_sendCommand+0x160>
		__ticks = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	3f c0       	rjmp	.+126    	; 0x1ffc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f80:	7c a1       	ldd	r23, Y+36	; 0x24
    1f82:	8d a1       	ldd	r24, Y+37	; 0x25
    1f84:	9e a1       	ldd	r25, Y+38	; 0x26
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	4c f5       	brge	.+82     	; 0x1fe8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	6f a1       	ldd	r22, Y+39	; 0x27
    1f98:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e2       	ldi	r20, 0x20	; 32
    1fa4:	51 e4       	ldi	r21, 0x41	; 65
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9a a3       	std	Y+34, r25	; 0x22
    1fbc:	89 a3       	std	Y+33, r24	; 0x21
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <LCD_sendCommand+0x1c0>
    1fc0:	80 e9       	ldi	r24, 0x90	; 144
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	98 a3       	std	Y+32, r25	; 0x20
    1fc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fca:	98 a1       	ldd	r25, Y+32	; 0x20
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_sendCommand+0x1ae>
    1fd0:	98 a3       	std	Y+32, r25	; 0x20
    1fd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9a a3       	std	Y+34, r25	; 0x22
    1fdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <LCD_sendCommand+0x1a2>
    1fe6:	14 c0       	rjmp	.+40     	; 0x2010 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fea:	7c a1       	ldd	r23, Y+36	; 0x24
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    2000:	9e 8f       	std	Y+30, r25	; 0x1e
    2002:	8d 8f       	std	Y+29, r24	; 0x1d
    2004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2006:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_sendCommand+0x1ea>
    200c:	9e 8f       	std	Y+30, r25	; 0x1e
    200e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
  GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	69 ad       	ldd	r22, Y+57	; 0x39
    2014:	0e 94 2d 0b 	call	0x165a	; 0x165a <GPIO_writePort>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	89 8f       	std	Y+25, r24	; 0x19
    2022:	9a 8f       	std	Y+26, r25	; 0x1a
    2024:	ab 8f       	std	Y+27, r26	; 0x1b
    2026:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	69 8d       	ldd	r22, Y+25	; 0x19
    202a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	55 e4       	ldi	r21, 0x45	; 69
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8d 8b       	std	Y+21, r24	; 0x15
    2042:	9e 8b       	std	Y+22, r25	; 0x16
    2044:	af 8b       	std	Y+23, r26	; 0x17
    2046:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	69 8d       	ldd	r22, Y+25	; 0x19
    2084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_sendCommand+0x2ac>
    20ac:	80 e9       	ldi	r24, 0x90	; 144
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	9a 8b       	std	Y+18, r25	; 0x12
    20b2:	89 8b       	std	Y+17, r24	; 0x11
    20b4:	89 89       	ldd	r24, Y+17	; 0x11
    20b6:	9a 89       	ldd	r25, Y+18	; 0x12
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x29a>
    20bc:	9a 8b       	std	Y+18, r25	; 0x12
    20be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9c 8b       	std	Y+20, r25	; 0x14
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_sendCommand+0x28e>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9c 8b       	std	Y+20, r25	; 0x14
    20e6:	8b 8b       	std	Y+19, r24	; 0x13
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	98 8b       	std	Y+16, r25	; 0x10
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
    20f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f2:	98 89       	ldd	r25, Y+16	; 0x10
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0x2d6>
    20f8:	98 8b       	std	Y+16, r25	; 0x10
    20fa:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1); /* delay for processing Tdsw = 100ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	9c 87       	std	Y+12, r25	; 0x0c
    2112:	ad 87       	std	Y+13, r26	; 0x0d
    2114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a e7       	ldi	r20, 0x7A	; 122
    2124:	55 e4       	ldi	r21, 0x45	; 69
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8f 83       	std	Y+7, r24	; 0x07
    2130:	98 87       	std	Y+8, r25	; 0x08
    2132:	a9 87       	std	Y+9, r26	; 0x09
    2134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_sendCommand+0x33a>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_sendCommand+0x39a>
    219a:	80 e9       	ldi	r24, 0x90	; 144
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_sendCommand+0x388>
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_sendCommand+0x37c>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x3c4>
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21ea:	e9 96       	adiw	r28, 0x39	; 57
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	e9 97       	sbiw	r28, 0x39	; 57
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	89 af       	std	Y+57, r24	; 0x39
  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e8       	ldi	r26, 0x80	; 128
    2222:	bf e3       	ldi	r27, 0x3F	; 63
    2224:	8d ab       	std	Y+53, r24	; 0x35
    2226:	9e ab       	std	Y+54, r25	; 0x36
    2228:	af ab       	std	Y+55, r26	; 0x37
    222a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6d a9       	ldd	r22, Y+53	; 0x35
    222e:	7e a9       	ldd	r23, Y+54	; 0x36
    2230:	8f a9       	ldd	r24, Y+55	; 0x37
    2232:	98 ad       	ldd	r25, Y+56	; 0x38
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	55 e4       	ldi	r21, 0x45	; 69
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	89 ab       	std	Y+49, r24	; 0x31
    2246:	9a ab       	std	Y+50, r25	; 0x32
    2248:	ab ab       	std	Y+51, r26	; 0x33
    224a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    224c:	69 a9       	ldd	r22, Y+49	; 0x31
    224e:	7a a9       	ldd	r23, Y+50	; 0x32
    2250:	8b a9       	ldd	r24, Y+51	; 0x33
    2252:	9c a9       	ldd	r25, Y+52	; 0x34
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    226e:	69 a9       	ldd	r22, Y+49	; 0x31
    2270:	7a a9       	ldd	r23, Y+50	; 0x32
    2272:	8b a9       	ldd	r24, Y+51	; 0x33
    2274:	9c a9       	ldd	r25, Y+52	; 0x34
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6d a9       	ldd	r22, Y+53	; 0x35
    2288:	7e a9       	ldd	r23, Y+54	; 0x36
    228a:	8f a9       	ldd	r24, Y+55	; 0x37
    228c:	98 ad       	ldd	r25, Y+56	; 0x38
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	98 ab       	std	Y+48, r25	; 0x30
    22ac:	8f a7       	std	Y+47, r24	; 0x2f
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_displayCharacter+0xd2>
    22b0:	80 e9       	ldi	r24, 0x90	; 144
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	9e a7       	std	Y+46, r25	; 0x2e
    22b6:	8d a7       	std	Y+45, r24	; 0x2d
    22b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_displayCharacter+0xc0>
    22c0:	9e a7       	std	Y+46, r25	; 0x2e
    22c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c6:	98 a9       	ldd	r25, Y+48	; 0x30
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	98 ab       	std	Y+48, r25	; 0x30
    22cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d0:	98 a9       	ldd	r25, Y+48	; 0x30
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_displayCharacter+0xb4>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	69 a9       	ldd	r22, Y+49	; 0x31
    22da:	7a a9       	ldd	r23, Y+50	; 0x32
    22dc:	8b a9       	ldd	r24, Y+51	; 0x33
    22de:	9c a9       	ldd	r25, Y+52	; 0x34
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	98 ab       	std	Y+48, r25	; 0x30
    22ea:	8f a7       	std	Y+47, r24	; 0x2f
    22ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ee:	98 a9       	ldd	r25, Y+48	; 0x30
    22f0:	9c a7       	std	Y+44, r25	; 0x2c
    22f2:	8b a7       	std	Y+43, r24	; 0x2b
    22f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_displayCharacter+0xfc>
    22fc:	9c a7       	std	Y+44, r25	; 0x2c
    22fe:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(1); /* delay for processing Tas = 50ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e8       	ldi	r26, 0x80	; 128
    2310:	bf e3       	ldi	r27, 0x3F	; 63
    2312:	8f a3       	std	Y+39, r24	; 0x27
    2314:	98 a7       	std	Y+40, r25	; 0x28
    2316:	a9 a7       	std	Y+41, r26	; 0x29
    2318:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6f a1       	ldd	r22, Y+39	; 0x27
    231c:	78 a5       	ldd	r23, Y+40	; 0x28
    231e:	89 a5       	ldd	r24, Y+41	; 0x29
    2320:	9a a5       	ldd	r25, Y+42	; 0x2a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a e7       	ldi	r20, 0x7A	; 122
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8b a3       	std	Y+35, r24	; 0x23
    2334:	9c a3       	std	Y+36, r25	; 0x24
    2336:	ad a3       	std	Y+37, r26	; 0x25
    2338:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    233a:	6b a1       	ldd	r22, Y+35	; 0x23
    233c:	7c a1       	ldd	r23, Y+36	; 0x24
    233e:	8d a1       	ldd	r24, Y+37	; 0x25
    2340:	9e a1       	ldd	r25, Y+38	; 0x26
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
    235a:	3f c0       	rjmp	.+126    	; 0x23da <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    235c:	6b a1       	ldd	r22, Y+35	; 0x23
    235e:	7c a1       	ldd	r23, Y+36	; 0x24
    2360:	8d a1       	ldd	r24, Y+37	; 0x25
    2362:	9e a1       	ldd	r25, Y+38	; 0x26
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6f a1       	ldd	r22, Y+39	; 0x27
    2376:	78 a5       	ldd	r23, Y+40	; 0x28
    2378:	89 a5       	ldd	r24, Y+41	; 0x29
    237a:	9a a5       	ldd	r25, Y+42	; 0x2a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9a a3       	std	Y+34, r25	; 0x22
    239a:	89 a3       	std	Y+33, r24	; 0x21
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_displayCharacter+0x1c0>
    239e:	80 e9       	ldi	r24, 0x90	; 144
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	98 a3       	std	Y+32, r25	; 0x20
    23a4:	8f 8f       	std	Y+31, r24	; 0x1f
    23a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a8:	98 a1       	ldd	r25, Y+32	; 0x20
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_displayCharacter+0x1ae>
    23ae:	98 a3       	std	Y+32, r25	; 0x20
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	89 a1       	ldd	r24, Y+33	; 0x21
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9a a3       	std	Y+34, r25	; 0x22
    23ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	89 a1       	ldd	r24, Y+33	; 0x21
    23be:	9a a1       	ldd	r25, Y+34	; 0x22
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_displayCharacter+0x1a2>
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6b a1       	ldd	r22, Y+35	; 0x23
    23c8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ca:	8d a1       	ldd	r24, Y+37	; 0x25
    23cc:	9e a1       	ldd	r25, Y+38	; 0x26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9a a3       	std	Y+34, r25	; 0x22
    23d8:	89 a3       	std	Y+33, r24	; 0x21
    23da:	89 a1       	ldd	r24, Y+33	; 0x21
    23dc:	9a a1       	ldd	r25, Y+34	; 0x22
    23de:	9e 8f       	std	Y+30, r25	; 0x1e
    23e0:	8d 8f       	std	Y+29, r24	; 0x1d
    23e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_displayCharacter+0x1ea>
    23ea:	9e 8f       	std	Y+30, r25	; 0x1e
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
  GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	69 ad       	ldd	r22, Y+57	; 0x39
    23f2:	0e 94 2d 0b 	call	0x165a	; 0x165a <GPIO_writePort>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	a0 e8       	ldi	r26, 0x80	; 128
    23fc:	bf e3       	ldi	r27, 0x3F	; 63
    23fe:	89 8f       	std	Y+25, r24	; 0x19
    2400:	9a 8f       	std	Y+26, r25	; 0x1a
    2402:	ab 8f       	std	Y+27, r26	; 0x1b
    2404:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	69 8d       	ldd	r22, Y+25	; 0x19
    2408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a e7       	ldi	r20, 0x7A	; 122
    2414:	55 e4       	ldi	r21, 0x45	; 69
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8d 8b       	std	Y+21, r24	; 0x15
    2420:	9e 8b       	std	Y+22, r25	; 0x16
    2422:	af 8b       	std	Y+23, r26	; 0x17
    2424:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2426:	6d 89       	ldd	r22, Y+21	; 0x15
    2428:	7e 89       	ldd	r23, Y+22	; 0x16
    242a:	8f 89       	ldd	r24, Y+23	; 0x17
    242c:	98 8d       	ldd	r25, Y+24	; 0x18
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 8b       	std	Y+20, r25	; 0x14
    2444:	8b 8b       	std	Y+19, r24	; 0x13
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	69 8d       	ldd	r22, Y+25	; 0x19
    2462:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <LCD_displayCharacter+0x2ac>
    248a:	80 e9       	ldi	r24, 0x90	; 144
    248c:	91 e0       	ldi	r25, 0x01	; 1
    248e:	9a 8b       	std	Y+18, r25	; 0x12
    2490:	89 8b       	std	Y+17, r24	; 0x11
    2492:	89 89       	ldd	r24, Y+17	; 0x11
    2494:	9a 89       	ldd	r25, Y+18	; 0x12
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_displayCharacter+0x29a>
    249a:	9a 8b       	std	Y+18, r25	; 0x12
    249c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8b 89       	ldd	r24, Y+19	; 0x13
    24a0:	9c 89       	ldd	r25, Y+20	; 0x14
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9c 8b       	std	Y+20, r25	; 0x14
    24a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8b 89       	ldd	r24, Y+19	; 0x13
    24aa:	9c 89       	ldd	r25, Y+20	; 0x14
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <LCD_displayCharacter+0x28e>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	6d 89       	ldd	r22, Y+21	; 0x15
    24b4:	7e 89       	ldd	r23, Y+22	; 0x16
    24b6:	8f 89       	ldd	r24, Y+23	; 0x17
    24b8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9c 8b       	std	Y+20, r25	; 0x14
    24c4:	8b 8b       	std	Y+19, r24	; 0x13
    24c6:	8b 89       	ldd	r24, Y+19	; 0x13
    24c8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ca:	98 8b       	std	Y+16, r25	; 0x10
    24cc:	8f 87       	std	Y+15, r24	; 0x0f
    24ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d0:	98 89       	ldd	r25, Y+16	; 0x10
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_displayCharacter+0x2d6>
    24d6:	98 8b       	std	Y+16, r25	; 0x10
    24d8:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1); /* delay for processing Tdsw = 100ns */
  GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e8       	ldi	r26, 0x80	; 128
    24ea:	bf e3       	ldi	r27, 0x3F	; 63
    24ec:	8b 87       	std	Y+11, r24	; 0x0b
    24ee:	9c 87       	std	Y+12, r25	; 0x0c
    24f0:	ad 87       	std	Y+13, r26	; 0x0d
    24f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a e7       	ldi	r20, 0x7A	; 122
    2502:	55 e4       	ldi	r21, 0x45	; 69
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8f 83       	std	Y+7, r24	; 0x07
    250e:	98 87       	std	Y+8, r25	; 0x08
    2510:	a9 87       	std	Y+9, r26	; 0x09
    2512:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2514:	6f 81       	ldd	r22, Y+7	; 0x07
    2516:	78 85       	ldd	r23, Y+8	; 0x08
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2550:	7c 85       	ldd	r23, Y+12	; 0x0c
    2552:	8d 85       	ldd	r24, Y+13	; 0x0d
    2554:	9e 85       	ldd	r25, Y+14	; 0x0e
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_displayCharacter+0x39a>
    2578:	80 e9       	ldi	r24, 0x90	; 144
    257a:	91 e0       	ldi	r25, 0x01	; 1
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_displayCharacter+0x388>
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_displayCharacter+0x37c>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_displayCharacter+0x3c4>
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25c8:	e9 96       	adiw	r28, 0x39	; 57
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_displayString>:
 * Description: Displays a string on the LCD.
 *
 * @param Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_displayString+0x6>
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
  uint8 i = 0;
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <LCD_displayString+0x30>
  while (Str[i] != '\0')
    {
      LCD_displayCharacter(Str[i]);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	fc 01       	movw	r30, r24
    25fa:	e2 0f       	add	r30, r18
    25fc:	f3 1f       	adc	r31, r19
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_displayCharacter>
      i++;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01
 * @param Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
  uint8 i = 0;
  while (Str[i] != '\0')
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	39 f7       	brne	.-50     	; 0x25ee <LCD_displayString+0x14>
   {
   LCD_displayCharacter(*Str);
   Str++;
   }
   *********************************************************/
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <LCD_moveCursor>:
 *
 * @param row: The row index (0 or 1).
 * @param col: The column index (0 to 15).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <LCD_moveCursor+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_moveCursor+0x8>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	6b 83       	std	Y+3, r22	; 0x03
  uint8 lcd_memory_address;

  /* Calculate the required address in the LCD DDRAM */
  switch (row)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	3d 83       	std	Y+5, r19	; 0x05
    2646:	2c 83       	std	Y+4, r18	; 0x04
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	9d 81       	ldd	r25, Y+5	; 0x05
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	91 05       	cpc	r25, r1
    2650:	c1 f0       	breq	.+48     	; 0x2682 <LCD_moveCursor+0x56>
    2652:	2c 81       	ldd	r18, Y+4	; 0x04
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	2c f4       	brge	.+10     	; 0x2666 <LCD_moveCursor+0x3a>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	61 f0       	breq	.+24     	; 0x267c <LCD_moveCursor+0x50>
    2664:	19 c0       	rjmp	.+50     	; 0x2698 <LCD_moveCursor+0x6c>
    2666:	2c 81       	ldd	r18, Y+4	; 0x04
    2668:	3d 81       	ldd	r19, Y+5	; 0x05
    266a:	22 30       	cpi	r18, 0x02	; 2
    266c:	31 05       	cpc	r19, r1
    266e:	69 f0       	breq	.+26     	; 0x268a <LCD_moveCursor+0x5e>
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	9d 81       	ldd	r25, Y+5	; 0x05
    2674:	83 30       	cpi	r24, 0x03	; 3
    2676:	91 05       	cpc	r25, r1
    2678:	61 f0       	breq	.+24     	; 0x2692 <LCD_moveCursor+0x66>
    267a:	0e c0       	rjmp	.+28     	; 0x2698 <LCD_moveCursor+0x6c>
    {
    case 0:
      lcd_memory_address = col;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	0b c0       	rjmp	.+22     	; 0x2698 <LCD_moveCursor+0x6c>
      break;
    case 1:
      lcd_memory_address = col + 0x40;
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	80 5c       	subi	r24, 0xC0	; 192
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <LCD_moveCursor+0x6c>
      break;
    case 2:
      lcd_memory_address = col + 0x10;
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	80 5f       	subi	r24, 0xF0	; 240
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <LCD_moveCursor+0x6c>
      break;
    case 3:
      lcd_memory_address = col + 0x50;
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	80 5b       	subi	r24, 0xB0	; 176
    2696:	89 83       	std	Y+1, r24	; 0x01
      break;
    }
  /* Move the LCD cursor to this specific address */
  LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	80 68       	ori	r24, 0x80	; 128
    269c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <LCD_displayStringRowColumn>:
 * @param row: The row index (0 or 1).
 * @param col: The column index (0 to 15).
 * @param Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <LCD_displayStringRowColumn+0x6>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <LCD_displayStringRowColumn+0x8>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	6a 83       	std	Y+2, r22	; 0x02
    26c0:	5c 83       	std	Y+4, r21	; 0x04
    26c2:	4b 83       	std	Y+3, r20	; 0x03
  LCD_moveCursor(row, col); /* go to to the required LCD position */
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	6a 81       	ldd	r22, Y+2	; 0x02
    26c8:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
  LCD_displayString(Str); /* display the string */
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
  LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <LCD_cursorBlink>:

/*
 * Description: Sends the cursor blink command to the LCD.
 */
void LCD_cursorBlink(void)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
  LCD_sendCommand(LCD_CURSOR_BLINK);
    26fe:	8d e0       	ldi	r24, 0x0D	; 13
    2700:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <LCD_displayNumber>:
 * Description: Displays a decimal value on the LCD.
 *
 * @param data: The integer value to be displayed.
 */
void LCD_displayNumber(sint32 num)
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	68 97       	sbiw	r28, 0x18	; 24
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	6d 8b       	std	Y+21, r22	; 0x15
    2720:	7e 8b       	std	Y+22, r23	; 0x16
    2722:	8f 8b       	std	Y+23, r24	; 0x17
    2724:	98 8f       	std	Y+24, r25	; 0x18
  /* Convert the number to a string and display it */
  char buffer[20]; /* Buffer to hold the converted number */
  ltoa(num, buffer, 10); /* Convert number to string in base 10 */
    2726:	8d 89       	ldd	r24, Y+21	; 0x15
    2728:	9e 89       	ldd	r25, Y+22	; 0x16
    272a:	af 89       	ldd	r26, Y+23	; 0x17
    272c:	b8 8d       	ldd	r27, Y+24	; 0x18
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	9e 01       	movw	r18, r28
    2734:	2f 5f       	subi	r18, 0xFF	; 255
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
    2738:	a9 01       	movw	r20, r18
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <ltoa>
  LCD_displayString(buffer); /* Display the string representation of the number */
    2742:	ce 01       	movw	r24, r28
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
}
    274a:	68 96       	adiw	r28, 0x18	; 24
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <FLAME_init>:
 * This function sets up the GPIO pin direction for the flame sensor,
 * preparing it for use in detecting flames.
 *
 * @param flameSensor Pointer to a structure of type `FLAME_t` that holds the configuration settings for the flame sensor.
 */
void FLAME_init(FLAME_t *flameSensor) {
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <FLAME_init+0x6>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
  GPIO_setupPinDirection(flameSensor->port, flameSensor->pin, PIN_INPUT); /* Set the pin as input to read the flame sensor */
    276a:	e9 81       	ldd	r30, Y+1	; 0x01
    276c:	fa 81       	ldd	r31, Y+2	; 0x02
    276e:	80 81       	ld	r24, Z
    2770:	83 70       	andi	r24, 0x03	; 3
    2772:	28 2f       	mov	r18, r24
    2774:	e9 81       	ldd	r30, Y+1	; 0x01
    2776:	fa 81       	ldd	r31, Y+2	; 0x02
    2778:	80 81       	ld	r24, Z
    277a:	86 95       	lsr	r24
    277c:	86 95       	lsr	r24
    277e:	87 70       	andi	r24, 0x07	; 7
    2780:	98 2f       	mov	r25, r24
    2782:	82 2f       	mov	r24, r18
    2784:	69 2f       	mov	r22, r25
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <FLAME_isFlame>:
 * a value indicating whether a flame is detected based on the configuration.
 *
 * @param flameSensor Pointer to the flame sensor configuration structure.
 * @return uint8 Returns 1 if a flame is detected, otherwise returns 0.
 */
uint8 FLAME_isFlame(FLAME_t *flameSensor) {
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <FLAME_isFlame+0xa>
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
  return flameSensor->flameLogic == GPIO_readPin(flameSensor->port, flameSensor->pin); /* Compare the sensor's pin reading with the configured logic */
    27aa:	e9 81       	ldd	r30, Y+1	; 0x01
    27ac:	fa 81       	ldd	r31, Y+2	; 0x02
    27ae:	80 81       	ld	r24, Z
    27b0:	82 95       	swap	r24
    27b2:	86 95       	lsr	r24
    27b4:	87 70       	andi	r24, 0x07	; 7
    27b6:	81 70       	andi	r24, 0x01	; 1
    27b8:	08 2f       	mov	r16, r24
    27ba:	10 e0       	ldi	r17, 0x00	; 0
    27bc:	e9 81       	ldd	r30, Y+1	; 0x01
    27be:	fa 81       	ldd	r31, Y+2	; 0x02
    27c0:	80 81       	ld	r24, Z
    27c2:	83 70       	andi	r24, 0x03	; 3
    27c4:	28 2f       	mov	r18, r24
    27c6:	e9 81       	ldd	r30, Y+1	; 0x01
    27c8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ca:	80 81       	ld	r24, Z
    27cc:	86 95       	lsr	r24
    27ce:	86 95       	lsr	r24
    27d0:	87 70       	andi	r24, 0x07	; 7
    27d2:	98 2f       	mov	r25, r24
    27d4:	82 2f       	mov	r24, r18
    27d6:	69 2f       	mov	r22, r25
    27d8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <GPIO_readPin>
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	1b 82       	std	Y+3, r1	; 0x03
    27e2:	08 17       	cp	r16, r24
    27e4:	19 07       	cpc	r17, r25
    27e6:	11 f4       	brne	.+4      	; 0x27ec <FLAME_isFlame+0x56>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <DISPLAY_init>:
/**
 * @brief Initializes the display by setting up the LCD.
 *
 * This function sets up the LCD for use by calling the LCD initialization function.
 */
void DISPLAY_init(void) {
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
  /* Initialize the LCD hardware module */
  LCD_init();
    2806:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_init>
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <DISPLAY_showAlarm>:
 * @brief Displays an alarm message on the LCD.
 *
 * This function clears the LCD screen and displays a "Critical alert!" message
 * to indicate that an alarm condition has occurred.
 */
void DISPLAY_showAlarm(void) {
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
  /* Clear the screen and display a critical alert message */
  LCD_clearScreen();
    2818:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
  LCD_displayString("Critical alert!");
    281c:	80 e6       	ldi	r24, 0x60	; 96
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
}
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <DISPLAY_showNormal>:
 * @brief Displays the normal operation status on the LCD.
 *
 * This function shows the current fan status (ON or OFF), temperature, and light
 * intensity on the LCD in normal operation mode.
 */
void DISPLAY_showNormal(void) {
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
  /* Display motor status based on temperature */
  LCD_moveCursor(LCD_FIRST_ROW, LCD_FIRST_COL);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
  /* Check temperature level and display appropriate status */
  if (g_temprature < TEMP_LEVEL1) {
    283a:	80 91 c3 01 	lds	r24, 0x01C3
    283e:	89 31       	cpi	r24, 0x19	; 25
    2840:	28 f4       	brcc	.+10     	; 0x284c <DISPLAY_showNormal+0x22>
    LCD_displayString("    FAN is OFF    ");
    2842:	80 e7       	ldi	r24, 0x70	; 112
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
    284a:	04 c0       	rjmp	.+8      	; 0x2854 <DISPLAY_showNormal+0x2a>
  } else {
    LCD_displayString("    FAN is ON     ");
    284c:	83 e8       	ldi	r24, 0x83	; 131
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
  }

  /* Display the temperature and light intensity on the second row */
  LCD_moveCursor(LCD_SECOND_ROW, LCD_FIRST_COL);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
  LCD_displayString("Temp=");
    285c:	86 e9       	ldi	r24, 0x96	; 150
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
  LCD_displayNumber(g_temprature); /* Display the temperature value */
    2864:	80 91 c3 01 	lds	r24, 0x01C3
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_displayNumber>

  LCD_displayString(" LDR=");
    2878:	8c e9       	ldi	r24, 0x9C	; 156
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
  LCD_displayNumber(g_lightIntensity); /* Display the light intensity value */
    2880:	80 91 c4 01 	lds	r24, 0x01C4
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_displayNumber>
  LCD_displayString("% "); /* Add percentage symbol for light intensity */
    2894:	82 ea       	ldi	r24, 0xA2	; 162
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
}
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <DCMOTOR_init>:
 * This function sets up the GPIO pin directions for the motor control pins,
 * allowing the motor to operate based on the specified configuration settings.
 *
 * @param dcmotor Pointer to a structure of type `DCMOTOR_t` that holds the configuration settings for the DC Motor.
 */
void DCMOTOR_init(DCMOTOR_t *dcmotor) {
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <DCMOTOR_init+0x6>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
  // Set the direction for the motor control pins
  GPIO_setupPinDirection(dcmotor->dirPort, dcmotor->dirPin1, PIN_OUTPUT);
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	80 81       	ld	r24, Z
    28b6:	83 70       	andi	r24, 0x03	; 3
    28b8:	28 2f       	mov	r18, r24
    28ba:	e9 81       	ldd	r30, Y+1	; 0x01
    28bc:	fa 81       	ldd	r31, Y+2	; 0x02
    28be:	80 81       	ld	r24, Z
    28c0:	86 95       	lsr	r24
    28c2:	86 95       	lsr	r24
    28c4:	87 70       	andi	r24, 0x07	; 7
    28c6:	98 2f       	mov	r25, r24
    28c8:	82 2f       	mov	r24, r18
    28ca:	69 2f       	mov	r22, r25
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
  GPIO_setupPinDirection(dcmotor->dirPort, dcmotor->dirPin2, PIN_OUTPUT);
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	80 81       	ld	r24, Z
    28d8:	83 70       	andi	r24, 0x03	; 3
    28da:	28 2f       	mov	r18, r24
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	80 81       	ld	r24, Z
    28e2:	82 95       	swap	r24
    28e4:	86 95       	lsr	r24
    28e6:	87 70       	andi	r24, 0x07	; 7
    28e8:	98 2f       	mov	r25, r24
    28ea:	82 2f       	mov	r24, r18
    28ec:	69 2f       	mov	r22, r25
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

  // If enabled, set the enable pin direction
  if (dcmotor->enableEn)
    28f4:	e9 81       	ldd	r30, Y+1	; 0x01
    28f6:	fa 81       	ldd	r31, Y+2	; 0x02
    28f8:	81 81       	ldd	r24, Z+1	; 0x01
    28fa:	81 70       	andi	r24, 0x01	; 1
    28fc:	88 23       	and	r24, r24
    28fe:	99 f0       	breq	.+38     	; 0x2926 <DCMOTOR_init+0x84>
    GPIO_setupPinDirection(dcmotor->enPort, dcmotor->enPin, PIN_OUTPUT);
    2900:	e9 81       	ldd	r30, Y+1	; 0x01
    2902:	fa 81       	ldd	r31, Y+2	; 0x02
    2904:	81 81       	ldd	r24, Z+1	; 0x01
    2906:	86 95       	lsr	r24
    2908:	83 70       	andi	r24, 0x03	; 3
    290a:	28 2f       	mov	r18, r24
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	81 81       	ldd	r24, Z+1	; 0x01
    2912:	86 95       	lsr	r24
    2914:	86 95       	lsr	r24
    2916:	86 95       	lsr	r24
    2918:	87 70       	andi	r24, 0x07	; 7
    291a:	98 2f       	mov	r25, r24
    291c:	82 2f       	mov	r24, r18
    291e:	69 2f       	mov	r22, r25
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

  // Initialize the Timer for PWM control
  TIMER0_init(&g_timer0);
    2926:	8d ea       	ldi	r24, 0xAD	; 173
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_init>
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <DCMOTOR_setDir>:
 * This function changes the motor direction by activating the appropriate control pins.
 *
 * @param dcmotor Pointer to the DC Motor configuration structure.
 * @param dir The direction to set for the motor (DCMOTOR_DIR_1 or DCMOTOR_DIR_2).
 */
void DCMOTOR_setDir(DCMOTOR_t *dcmotor, uint8 dir) {
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	00 d0       	rcall	.+0      	; 0x293e <DCMOTOR_setDir+0x6>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <DCMOTOR_setDir+0x8>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <DCMOTOR_setDir+0xa>
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	6b 83       	std	Y+3, r22	; 0x03
  // Set the direction pins based on the specified direction
  GPIO_writePin(dcmotor->dirPort, dcmotor->dirPin1, dir);
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	80 81       	ld	r24, Z
    2952:	83 70       	andi	r24, 0x03	; 3
    2954:	28 2f       	mov	r18, r24
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	80 81       	ld	r24, Z
    295c:	86 95       	lsr	r24
    295e:	86 95       	lsr	r24
    2960:	87 70       	andi	r24, 0x07	; 7
    2962:	98 2f       	mov	r25, r24
    2964:	82 2f       	mov	r24, r18
    2966:	69 2f       	mov	r22, r25
    2968:	4b 81       	ldd	r20, Y+3	; 0x03
    296a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
  GPIO_writePin(dcmotor->dirPort, dcmotor->dirPin2, !dir); // Corrected: should write to dirPin2
    296e:	e9 81       	ldd	r30, Y+1	; 0x01
    2970:	fa 81       	ldd	r31, Y+2	; 0x02
    2972:	80 81       	ld	r24, Z
    2974:	83 70       	andi	r24, 0x03	; 3
    2976:	8e 83       	std	Y+6, r24	; 0x06
    2978:	e9 81       	ldd	r30, Y+1	; 0x01
    297a:	fa 81       	ldd	r31, Y+2	; 0x02
    297c:	80 81       	ld	r24, Z
    297e:	82 95       	swap	r24
    2980:	86 95       	lsr	r24
    2982:	87 70       	andi	r24, 0x07	; 7
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	1c 82       	std	Y+4, r1	; 0x04
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	88 23       	and	r24, r24
    298c:	11 f4       	brne	.+4      	; 0x2992 <DCMOTOR_setDir+0x5a>
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	8c 83       	std	Y+4, r24	; 0x04
    2992:	8e 81       	ldd	r24, Y+6	; 0x06
    2994:	6d 81       	ldd	r22, Y+5	; 0x05
    2996:	4c 81       	ldd	r20, Y+4	; 0x04
    2998:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    299c:	26 96       	adiw	r28, 0x06	; 6
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <DCMOTOR_stop>:
 *
 * This function disables the motor by setting both control pins to low.
 *
 * @param dcmotor Pointer to the DC Motor configuration structure.
 */
void DCMOTOR_stop(DCMOTOR_t *dcmotor) {
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <DCMOTOR_stop+0x6>
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
  // Set both direction pins low to stop the motor
  GPIO_writePin(dcmotor->dirPort, dcmotor->dirPin1, LOGIC_LOW);
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	80 81       	ld	r24, Z
    29c2:	83 70       	andi	r24, 0x03	; 3
    29c4:	28 2f       	mov	r18, r24
    29c6:	e9 81       	ldd	r30, Y+1	; 0x01
    29c8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ca:	80 81       	ld	r24, Z
    29cc:	86 95       	lsr	r24
    29ce:	86 95       	lsr	r24
    29d0:	87 70       	andi	r24, 0x07	; 7
    29d2:	98 2f       	mov	r25, r24
    29d4:	82 2f       	mov	r24, r18
    29d6:	69 2f       	mov	r22, r25
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
  GPIO_writePin(dcmotor->dirPort, dcmotor->dirPin2, LOGIC_LOW); // Corrected: should write to dirPin2
    29de:	e9 81       	ldd	r30, Y+1	; 0x01
    29e0:	fa 81       	ldd	r31, Y+2	; 0x02
    29e2:	80 81       	ld	r24, Z
    29e4:	83 70       	andi	r24, 0x03	; 3
    29e6:	28 2f       	mov	r18, r24
    29e8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ea:	fa 81       	ldd	r31, Y+2	; 0x02
    29ec:	80 81       	ld	r24, Z
    29ee:	82 95       	swap	r24
    29f0:	86 95       	lsr	r24
    29f2:	87 70       	andi	r24, 0x07	; 7
    29f4:	98 2f       	mov	r25, r24
    29f6:	82 2f       	mov	r24, r18
    29f8:	69 2f       	mov	r22, r25
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <DCMOTOR_setSpeed>:
 * This function adjusts the motor speed according to the provided speed value.
 * The speed is set using PWM via Timer0.
 *
 * @param speed The speed value to set for the motor (typically a value between 0 and 100).
 */
void DCMOTOR_setSpeed(uint8 speed) {
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	0f 92       	push	r0
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	89 83       	std	Y+1, r24	; 0x01
  // Set the duty cycle for the Timer to control the motor speed
  TIMER0_setDutyCycle(speed);
    2a16:	ec e5       	ldi	r30, 0x5C	; 92
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	48 2f       	mov	r20, r24
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	ca 01       	movw	r24, r20
    2a22:	9c 01       	movw	r18, r24
    2a24:	22 0f       	add	r18, r18
    2a26:	33 1f       	adc	r19, r19
    2a28:	c9 01       	movw	r24, r18
    2a2a:	96 95       	lsr	r25
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	88 27       	eor	r24, r24
    2a30:	97 95       	ror	r25
    2a32:	87 95       	ror	r24
    2a34:	82 1b       	sub	r24, r18
    2a36:	93 0b       	sbc	r25, r19
    2a38:	84 0f       	add	r24, r20
    2a3a:	95 1f       	adc	r25, r21
    2a3c:	24 e6       	ldi	r18, 0x64	; 100
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	b9 01       	movw	r22, r18
    2a42:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__udivmodhi4>
    2a46:	cb 01       	movw	r24, r22
    2a48:	80 83       	st	Z, r24
}
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <BUZZER_init>:
 * This function sets up the GPIO pin direction for the buzzer, allowing it to
 * operate as an output pin.
 *
 * @param buzzer Pointer to a structure of type `BUZZER_t` that holds the configuration settings for the Buzzer.
 */
void BUZZER_init(BUZZER_t *buzzer) {
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <BUZZER_init+0x6>
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
  // Set the pin direction for the buzzer to output
  GPIO_setupPinDirection(buzzer->port, buzzer->pin, PIN_OUTPUT);
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	80 81       	ld	r24, Z
    2a66:	83 70       	andi	r24, 0x03	; 3
    2a68:	28 2f       	mov	r18, r24
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	80 81       	ld	r24, Z
    2a70:	86 95       	lsr	r24
    2a72:	86 95       	lsr	r24
    2a74:	87 70       	andi	r24, 0x07	; 7
    2a76:	98 2f       	mov	r25, r24
    2a78:	82 2f       	mov	r24, r18
    2a7a:	69 2f       	mov	r22, r25
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <BUZZER_turnOn>:
 * This function activates the buzzer by writing the appropriate logic level
 * to the configured pin based on the buzzer's logic configuration.
 *
 * @param buzzer Pointer to the buzzer configuration structure.
 */
void BUZZER_turnOn(BUZZER_t *buzzer) {
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <BUZZER_turnOn+0x6>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
  // Write high logic to the buzzer pin based on its logic configuration
  GPIO_writePin(buzzer->port, buzzer->pin, LOGIC_HIGH ^ buzzer->buzzerLogic);
    2a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9e:	80 81       	ld	r24, Z
    2aa0:	83 70       	andi	r24, 0x03	; 3
    2aa2:	38 2f       	mov	r19, r24
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	80 81       	ld	r24, Z
    2aaa:	86 95       	lsr	r24
    2aac:	86 95       	lsr	r24
    2aae:	87 70       	andi	r24, 0x07	; 7
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab6:	80 81       	ld	r24, Z
    2ab8:	82 95       	swap	r24
    2aba:	86 95       	lsr	r24
    2abc:	87 70       	andi	r24, 0x07	; 7
    2abe:	81 70       	andi	r24, 0x01	; 1
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	89 27       	eor	r24, r25
    2ac4:	81 70       	andi	r24, 0x01	; 1
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	83 2f       	mov	r24, r19
    2aca:	62 2f       	mov	r22, r18
    2acc:	49 2f       	mov	r20, r25
    2ace:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <BUZZER_turnOff>:
 * This function deactivates the buzzer by writing a low logic level
 * to the configured pin based on the buzzer's logic configuration.
 *
 * @param buzzer Pointer to the buzzer configuration structure.
 */
void BUZZER_turnOff(BUZZER_t *buzzer) {
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <BUZZER_turnOff+0x6>
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01
  // Write low logic to the buzzer pin based on its logic configuration
  GPIO_writePin(buzzer->port, buzzer->pin, LOGIC_LOW ^ buzzer->buzzerLogic);
    2aea:	e9 81       	ldd	r30, Y+1	; 0x01
    2aec:	fa 81       	ldd	r31, Y+2	; 0x02
    2aee:	80 81       	ld	r24, Z
    2af0:	83 70       	andi	r24, 0x03	; 3
    2af2:	38 2f       	mov	r19, r24
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	80 81       	ld	r24, Z
    2afa:	86 95       	lsr	r24
    2afc:	86 95       	lsr	r24
    2afe:	87 70       	andi	r24, 0x07	; 7
    2b00:	28 2f       	mov	r18, r24
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	80 81       	ld	r24, Z
    2b08:	82 95       	swap	r24
    2b0a:	86 95       	lsr	r24
    2b0c:	87 70       	andi	r24, 0x07	; 7
    2b0e:	81 70       	andi	r24, 0x01	; 1
    2b10:	98 2f       	mov	r25, r24
    2b12:	83 2f       	mov	r24, r19
    2b14:	62 2f       	mov	r22, r18
    2b16:	49 2f       	mov	r20, r25
    2b18:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <BUZZER_toggle>:
 * This function switches the buzzer between on and off states by toggling
 * the logic level on the configured pin.
 *
 * @param buzzer Pointer to the buzzer configuration structure.
 */
void BUZZER_toggle(BUZZER_t *buzzer) {
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <BUZZER_toggle+0x6>
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
  // Toggle the current state of the buzzer pin
  GPIO_togglePin(buzzer->port, buzzer->pin);
    2b34:	e9 81       	ldd	r30, Y+1	; 0x01
    2b36:	fa 81       	ldd	r31, Y+2	; 0x02
    2b38:	80 81       	ld	r24, Z
    2b3a:	83 70       	andi	r24, 0x03	; 3
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b40:	fa 81       	ldd	r31, Y+2	; 0x02
    2b42:	80 81       	ld	r24, Z
    2b44:	86 95       	lsr	r24
    2b46:	86 95       	lsr	r24
    2b48:	87 70       	andi	r24, 0x07	; 7
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	82 2f       	mov	r24, r18
    2b4e:	69 2f       	mov	r22, r25
    2b50:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <GPIO_togglePin>
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <ALARM_init>:
/**
 * @brief Initializes the alarm system.
 *
 * This function initializes the buzzer and flame sensor, preparing them for operation.
 */
void ALARM_init(void) {
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
  BUZZER_init(&g_buzzer1); /* Initialize the buzzer */
    2b66:	8f eb       	ldi	r24, 0xBF	; 191
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <BUZZER_init>
  FLAME_init(&g_flameSensor1); /* Initialize the flame sensor */
    2b6e:	8b eb       	ldi	r24, 0xBB	; 187
    2b70:	91 e0       	ldi	r25, 0x01	; 1
    2b72:	0e 94 ae 13 	call	0x275c	; 0x275c <FLAME_init>
}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <ALARM_handleFlame>:
 * @brief Handles the flame detection logic and controls the alarm.
 *
 * This function checks the flame sensor's state and activates/deactivates the alarm
 * (buzzer) accordingly.
 */
void ALARM_handleFlame(void) {
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
  if (FLAME_isFlame(&g_flameSensor1)) {
    2b84:	8b eb       	ldi	r24, 0xBB	; 187
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	0e 94 cb 13 	call	0x2796	; 0x2796 <FLAME_isFlame>
    2b8c:	88 23       	and	r24, r24
    2b8e:	61 f0       	breq	.+24     	; 0x2ba8 <ALARM_handleFlame+0x2c>
    if (g_flameFlag == FALSE) {
    2b90:	80 91 c2 01 	lds	r24, 0x01C2
    2b94:	88 23       	and	r24, r24
    2b96:	91 f4       	brne	.+36     	; 0x2bbc <ALARM_handleFlame+0x40>
      BUZZER_turnOn(&g_buzzer1); /* Turn on the buzzer if flame detected */
    2b98:	8f eb       	ldi	r24, 0xBF	; 191
    2b9a:	91 e0       	ldi	r25, 0x01	; 1
    2b9c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <BUZZER_turnOn>
      g_flameFlag = TRUE; /* Update flame flag */
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	80 93 c2 01 	sts	0x01C2, r24
    2ba6:	0a c0       	rjmp	.+20     	; 0x2bbc <ALARM_handleFlame+0x40>
    }
  }
  else {
    if (g_flameFlag == TRUE) {
    2ba8:	80 91 c2 01 	lds	r24, 0x01C2
    2bac:	81 30       	cpi	r24, 0x01	; 1
    2bae:	31 f4       	brne	.+12     	; 0x2bbc <ALARM_handleFlame+0x40>
      BUZZER_turnOff(&g_buzzer1); /* Turn off the buzzer if no flame is detected */
    2bb0:	8f eb       	ldi	r24, 0xBF	; 191
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <BUZZER_turnOff>
      g_flameFlag = FALSE; /* Reset flame flag */
    2bb8:	10 92 c2 01 	sts	0x01C2, r1
    }
  }
}
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <main>:
#include "ECU/Display/display.h"

/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/
int main(void) {
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <main+0x6>
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <main+0x8>
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62

  /* Initialize system applications */
  LIGHT_init();
    2bce:	0e 94 84 0c 	call	0x1908	; 0x1908 <LIGHT_init>
  MOTOR_init();
    2bd2:	0e 94 40 0c 	call	0x1880	; 0x1880 <MOTOR_init>
  ALARM_init();
    2bd6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <ALARM_init>
  DISPLAY_init();
    2bda:	0e 94 ff 13 	call	0x27fe	; 0x27fe <DISPLAY_init>
  register uint8 preVal;

  for (;;) {

    /* Handle alarm, check if there is flame */
    preVal = g_flameFlag;
    2bde:	80 91 c2 01 	lds	r24, 0x01C2
    2be2:	89 83       	std	Y+1, r24	; 0x01
    ALARM_handleFlame();
    2be4:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <ALARM_handleFlame>
    g_changeLcdView = (preVal != g_flameFlag);
    2be8:	80 91 c2 01 	lds	r24, 0x01C2
    2bec:	1c 82       	std	Y+4, r1	; 0x04
    2bee:	99 81       	ldd	r25, Y+1	; 0x01
    2bf0:	98 17       	cp	r25, r24
    2bf2:	11 f0       	breq	.+4      	; 0x2bf8 <main+0x36>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	8c 83       	std	Y+4, r24	; 0x04
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	90 93 bc 01 	sts	0x01BC, r25

    /* Handle temperature change, if temperature changed adjust motor speed */
    preVal = g_temprature;
    2bfe:	80 91 c3 01 	lds	r24, 0x01C3
    2c02:	89 83       	std	Y+1, r24	; 0x01
    MOTOR_handleTemperature();
    2c04:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <MOTOR_handleTemperature>
    g_changeLcdView |= (preVal != g_temprature);
    2c08:	80 91 c3 01 	lds	r24, 0x01C3
    2c0c:	1b 82       	std	Y+3, r1	; 0x03
    2c0e:	99 81       	ldd	r25, Y+1	; 0x01
    2c10:	98 17       	cp	r25, r24
    2c12:	11 f0       	breq	.+4      	; 0x2c18 <main+0x56>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	8b 83       	std	Y+3, r24	; 0x03
    2c18:	80 91 bc 01 	lds	r24, 0x01BC
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	89 2b       	or	r24, r25
    2c20:	80 93 bc 01 	sts	0x01BC, r24

    /* Handle light intensity change, if intensity changed adjust LEDs states */
    preVal = g_lightIntensity;
    2c24:	80 91 c4 01 	lds	r24, 0x01C4
    2c28:	89 83       	std	Y+1, r24	; 0x01
    LIGHT_handleIntensity();
    2c2a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <LIGHT_handleIntensity>
    g_changeLcdView |= (preVal != g_lightIntensity);
    2c2e:	80 91 c4 01 	lds	r24, 0x01C4
    2c32:	1a 82       	std	Y+2, r1	; 0x02
    2c34:	99 81       	ldd	r25, Y+1	; 0x01
    2c36:	98 17       	cp	r25, r24
    2c38:	11 f0       	breq	.+4      	; 0x2c3e <main+0x7c>
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	80 91 bc 01 	lds	r24, 0x01BC
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	89 2b       	or	r24, r25
    2c46:	80 93 bc 01 	sts	0x01BC, r24

    /* Handle LCD view if needed to change */
    if (TRUE == g_changeLcdView) {
    2c4a:	80 91 bc 01 	lds	r24, 0x01BC
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	31 f6       	brne	.-116    	; 0x2bde <main+0x1c>
      g_changeLcdView = FALSE;
    2c52:	10 92 bc 01 	sts	0x01BC, r1

      if (TRUE == g_flameFlag)
    2c56:	80 91 c2 01 	lds	r24, 0x01C2
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	19 f4       	brne	.+6      	; 0x2c64 <main+0xa2>
	DISPLAY_showAlarm();
    2c5e:	0e 94 08 14 	call	0x2810	; 0x2810 <DISPLAY_showAlarm>
    2c62:	bd cf       	rjmp	.-134    	; 0x2bde <main+0x1c>
      else
	DISPLAY_showNormal();
    2c64:	0e 94 15 14 	call	0x282a	; 0x282a <DISPLAY_showNormal>
    2c68:	ba cf       	rjmp	.-140    	; 0x2bde <main+0x1c>

00002c6a <__mulsi3>:
    2c6a:	62 9f       	mul	r22, r18
    2c6c:	d0 01       	movw	r26, r0
    2c6e:	73 9f       	mul	r23, r19
    2c70:	f0 01       	movw	r30, r0
    2c72:	82 9f       	mul	r24, r18
    2c74:	e0 0d       	add	r30, r0
    2c76:	f1 1d       	adc	r31, r1
    2c78:	64 9f       	mul	r22, r20
    2c7a:	e0 0d       	add	r30, r0
    2c7c:	f1 1d       	adc	r31, r1
    2c7e:	92 9f       	mul	r25, r18
    2c80:	f0 0d       	add	r31, r0
    2c82:	83 9f       	mul	r24, r19
    2c84:	f0 0d       	add	r31, r0
    2c86:	74 9f       	mul	r23, r20
    2c88:	f0 0d       	add	r31, r0
    2c8a:	65 9f       	mul	r22, r21
    2c8c:	f0 0d       	add	r31, r0
    2c8e:	99 27       	eor	r25, r25
    2c90:	72 9f       	mul	r23, r18
    2c92:	b0 0d       	add	r27, r0
    2c94:	e1 1d       	adc	r30, r1
    2c96:	f9 1f       	adc	r31, r25
    2c98:	63 9f       	mul	r22, r19
    2c9a:	b0 0d       	add	r27, r0
    2c9c:	e1 1d       	adc	r30, r1
    2c9e:	f9 1f       	adc	r31, r25
    2ca0:	bd 01       	movw	r22, r26
    2ca2:	cf 01       	movw	r24, r30
    2ca4:	11 24       	eor	r1, r1
    2ca6:	08 95       	ret

00002ca8 <__udivmodhi4>:
    2ca8:	aa 1b       	sub	r26, r26
    2caa:	bb 1b       	sub	r27, r27
    2cac:	51 e1       	ldi	r21, 0x11	; 17
    2cae:	07 c0       	rjmp	.+14     	; 0x2cbe <__udivmodhi4_ep>

00002cb0 <__udivmodhi4_loop>:
    2cb0:	aa 1f       	adc	r26, r26
    2cb2:	bb 1f       	adc	r27, r27
    2cb4:	a6 17       	cp	r26, r22
    2cb6:	b7 07       	cpc	r27, r23
    2cb8:	10 f0       	brcs	.+4      	; 0x2cbe <__udivmodhi4_ep>
    2cba:	a6 1b       	sub	r26, r22
    2cbc:	b7 0b       	sbc	r27, r23

00002cbe <__udivmodhi4_ep>:
    2cbe:	88 1f       	adc	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	5a 95       	dec	r21
    2cc4:	a9 f7       	brne	.-22     	; 0x2cb0 <__udivmodhi4_loop>
    2cc6:	80 95       	com	r24
    2cc8:	90 95       	com	r25
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	08 95       	ret

00002cd0 <__udivmodsi4>:
    2cd0:	a1 e2       	ldi	r26, 0x21	; 33
    2cd2:	1a 2e       	mov	r1, r26
    2cd4:	aa 1b       	sub	r26, r26
    2cd6:	bb 1b       	sub	r27, r27
    2cd8:	fd 01       	movw	r30, r26
    2cda:	0d c0       	rjmp	.+26     	; 0x2cf6 <__udivmodsi4_ep>

00002cdc <__udivmodsi4_loop>:
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	bb 1f       	adc	r27, r27
    2ce0:	ee 1f       	adc	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	a2 17       	cp	r26, r18
    2ce6:	b3 07       	cpc	r27, r19
    2ce8:	e4 07       	cpc	r30, r20
    2cea:	f5 07       	cpc	r31, r21
    2cec:	20 f0       	brcs	.+8      	; 0x2cf6 <__udivmodsi4_ep>
    2cee:	a2 1b       	sub	r26, r18
    2cf0:	b3 0b       	sbc	r27, r19
    2cf2:	e4 0b       	sbc	r30, r20
    2cf4:	f5 0b       	sbc	r31, r21

00002cf6 <__udivmodsi4_ep>:
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	1a 94       	dec	r1
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <__udivmodsi4_loop>
    2d02:	60 95       	com	r22
    2d04:	70 95       	com	r23
    2d06:	80 95       	com	r24
    2d08:	90 95       	com	r25
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	bd 01       	movw	r22, r26
    2d10:	cf 01       	movw	r24, r30
    2d12:	08 95       	ret

00002d14 <__prologue_saves__>:
    2d14:	2f 92       	push	r2
    2d16:	3f 92       	push	r3
    2d18:	4f 92       	push	r4
    2d1a:	5f 92       	push	r5
    2d1c:	6f 92       	push	r6
    2d1e:	7f 92       	push	r7
    2d20:	8f 92       	push	r8
    2d22:	9f 92       	push	r9
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	ca 1b       	sub	r28, r26
    2d3e:	db 0b       	sbc	r29, r27
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	09 94       	ijmp

00002d4c <__epilogue_restores__>:
    2d4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d4e:	39 88       	ldd	r3, Y+17	; 0x11
    2d50:	48 88       	ldd	r4, Y+16	; 0x10
    2d52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d60:	c8 84       	ldd	r12, Y+8	; 0x08
    2d62:	df 80       	ldd	r13, Y+7	; 0x07
    2d64:	ee 80       	ldd	r14, Y+6	; 0x06
    2d66:	fd 80       	ldd	r15, Y+5	; 0x05
    2d68:	0c 81       	ldd	r16, Y+4	; 0x04
    2d6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d70:	ce 0f       	add	r28, r30
    2d72:	d1 1d       	adc	r29, r1
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	ed 01       	movw	r28, r26
    2d80:	08 95       	ret

00002d82 <ltoa>:
    2d82:	fa 01       	movw	r30, r20
    2d84:	cf 93       	push	r28
    2d86:	ff 93       	push	r31
    2d88:	ef 93       	push	r30
    2d8a:	22 30       	cpi	r18, 0x02	; 2
    2d8c:	44 f1       	brlt	.+80     	; 0x2dde <ltoa+0x5c>
    2d8e:	25 32       	cpi	r18, 0x25	; 37
    2d90:	34 f5       	brge	.+76     	; 0x2dde <ltoa+0x5c>
    2d92:	c2 2f       	mov	r28, r18
    2d94:	e8 94       	clt
    2d96:	ca 30       	cpi	r28, 0x0A	; 10
    2d98:	49 f4       	brne	.+18     	; 0x2dac <ltoa+0x2a>
    2d9a:	97 fb       	bst	r25, 7
    2d9c:	3e f4       	brtc	.+14     	; 0x2dac <ltoa+0x2a>
    2d9e:	90 95       	com	r25
    2da0:	80 95       	com	r24
    2da2:	70 95       	com	r23
    2da4:	61 95       	neg	r22
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255
    2da8:	8f 4f       	sbci	r24, 0xFF	; 255
    2daa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dac:	2c 2f       	mov	r18, r28
    2dae:	33 27       	eor	r19, r19
    2db0:	44 27       	eor	r20, r20
    2db2:	55 27       	eor	r21, r21
    2db4:	ff 93       	push	r31
    2db6:	ef 93       	push	r30
    2db8:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    2dbc:	ef 91       	pop	r30
    2dbe:	ff 91       	pop	r31
    2dc0:	60 5d       	subi	r22, 0xD0	; 208
    2dc2:	6a 33       	cpi	r22, 0x3A	; 58
    2dc4:	0c f0       	brlt	.+2      	; 0x2dc8 <ltoa+0x46>
    2dc6:	69 5d       	subi	r22, 0xD9	; 217
    2dc8:	61 93       	st	Z+, r22
    2dca:	b9 01       	movw	r22, r18
    2dcc:	ca 01       	movw	r24, r20
    2dce:	60 50       	subi	r22, 0x00	; 0
    2dd0:	70 40       	sbci	r23, 0x00	; 0
    2dd2:	80 40       	sbci	r24, 0x00	; 0
    2dd4:	90 40       	sbci	r25, 0x00	; 0
    2dd6:	51 f7       	brne	.-44     	; 0x2dac <ltoa+0x2a>
    2dd8:	16 f4       	brtc	.+4      	; 0x2dde <ltoa+0x5c>
    2dda:	cd e2       	ldi	r28, 0x2D	; 45
    2ddc:	c1 93       	st	Z+, r28
    2dde:	10 82       	st	Z, r1
    2de0:	8f 91       	pop	r24
    2de2:	9f 91       	pop	r25
    2de4:	cf 91       	pop	r28
    2de6:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <strrev>

00002dea <strrev>:
    2dea:	dc 01       	movw	r26, r24
    2dec:	fc 01       	movw	r30, r24
    2dee:	67 2f       	mov	r22, r23
    2df0:	71 91       	ld	r23, Z+
    2df2:	77 23       	and	r23, r23
    2df4:	e1 f7       	brne	.-8      	; 0x2dee <strrev+0x4>
    2df6:	32 97       	sbiw	r30, 0x02	; 2
    2df8:	04 c0       	rjmp	.+8      	; 0x2e02 <strrev+0x18>
    2dfa:	7c 91       	ld	r23, X
    2dfc:	6d 93       	st	X+, r22
    2dfe:	70 83       	st	Z, r23
    2e00:	62 91       	ld	r22, -Z
    2e02:	ae 17       	cp	r26, r30
    2e04:	bf 07       	cpc	r27, r31
    2e06:	c8 f3       	brcs	.-14     	; 0x2dfa <strrev+0x10>
    2e08:	08 95       	ret

00002e0a <_exit>:
    2e0a:	f8 94       	cli

00002e0c <__stop_program>:
    2e0c:	ff cf       	rjmp	.-2      	; 0x2e0c <__stop_program>
